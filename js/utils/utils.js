/* ========================================================
 * Nom du fichier : utils.js
 * Description    : Fonctions utilitaires pour le projet Fisheye
 * Auteur         : Trackozor
 * Date           : 01/01/2025
 * Version        : 1.1.0 (Optimis√©e)
 * ======================================================== */

import { CONFIGLOG } from "../config/constants.js";

/* ========================= Fonction utilitaire : V√©rification des logs ========================= */
/**
 * V√©rifie si un type de log est activ√© en fonction de la configuration globale.
 *
 * @param {string} type - Type de log (info, warn, error, etc.).
 * @returns {boolean} - `true` si le log est activ√©, sinon `false`.
 */
const isLogEnabled = (type) => {
  if (!CONFIGLOG || !CONFIGLOG.ENABLE_LOGS) {
    console.warn(
      "CONFIGLOG est invalide ou les logs sont d√©sactiv√©s.",
      CONFIGLOG,
    );
    return false;
  }

  // V√©rifie que les objets n√©cessaires existent et renvoie `false` par d√©faut en cas de probl√®me
  const customLogSetting = CONFIGLOG.CUSTOM_LOG_SETTING?.[type];
  const logLevel = CONFIGLOG.LOG_LEVELS?.[type];

  return customLogSetting ?? logLevel ?? false;
};

/* ========================= Fonction utilitaire : Logger ========================= */
/**
 * Logue des √©v√©nements dans la console avec horodatage, ic√¥nes et styles.
 *
 * @param {string} type - Type de log : 'info', 'warn', 'error', etc.
 * @param {string} message - Message √† loguer.
 * @param {Object} [data={}] - Donn√©es suppl√©mentaires pour contexte.
 */
export const logEvent = (type, message, data = {}) => {
  if (!type || typeof type !== "string") {
    console.error("logEvent : Type de log invalide ou non d√©fini.", { type });
    return;
  }

  if (!isLogEnabled(type)) {
    console.warn(`logEvent : Le type de log "${type}" est d√©sactiv√©.`, {
      type,
    });
    return;
  }

  const timestamp = new Date().toLocaleTimeString();
  const prefix = `[Fisheye][${timestamp}]`;

  // Protection contre les propri√©t√©s inexistantes
  const icon =
    CONFIGLOG.LOG_ICONS?.[type] || CONFIGLOG.LOG_ICONS?.default || "üîµ";
  const style =
    CONFIGLOG.LOG_STYLES?.[type] ||
    CONFIGLOG.LOG_STYLES?.default ||
    "color: black;";

  const fullMessage = `${icon} ${prefix} ${type.toUpperCase()}: ${message}`;

  try {
    // V√©rifie si `console[type]` est disponible, sinon utilise `console.log`
    if (console[type] && typeof console[type] === "function") {
      console[type](`%c${fullMessage}`, style, data);
    } else {
      console.log(`%c${fullMessage}`, style, data);
    }
  } catch (error) {
    console.error(
      "%cErreur dans logEvent :",
      CONFIGLOG.LOG_STYLES?.error || "color: red;",
      error,
    );
  }
};

/**
 * Ajoute une classe CSS √† un √©l√©ment HTML.
 *
 * @param {HTMLElement} element - √âl√©ment HTML cible.
 * @param {string} className - Nom de la classe CSS √† ajouter.
 * @returns {boolean} - `true` si la classe a √©t√© ajout√©e, `false` si elle √©tait d√©j√† pr√©sente ou en cas d'erreur.
 */
export function addClass(element, className) {
  // V√©rifie si l'√©l√©ment est valide
  if (!(element instanceof HTMLElement)) {
    logEvent(
      "error",
      'addClass: Le param√®tre "element" n\'est pas un √©l√©ment HTML valide.',
      { element },
    );
    return false; // √âchec de l'op√©ration
  }

  // V√©rifie si la classe est une cha√Æne de caract√®res valide
  if (typeof className !== "string" || className.trim() === "") {
    logEvent("error", 'addClass: Le param√®tre "className" est invalide.', {
      className,
    });
    return false; // √âchec de l'op√©ration
  }

  // V√©rifie si la classe est d√©j√† pr√©sente
  if (element.classList.contains(className)) {
    logEvent(
      "info"`addClass: La classe "${className}" est d√©j√† pr√©sente sur l'√©l√©ment.`,
      { element },
    );
    return false; // Pas besoin d'ajouter la classe
  }

  // Ajoute la classe √† l'√©l√©ment
  try {
    element.classList.add(className);
    logEvent(
      "success",
      `addClass: La classe "${className}" a √©t√© ajout√©e avec succ√®s.`,
      { element },
    );
    return true; // Succ√®s de l'op√©ration
  } catch (error) {
    logEvent(
      "error",
      "addClass: Une erreur est survenue lors de l'ajout de la classe.",
      { error },
    );
    return false; // √âchec de l'op√©ration
  }
}

/* ========================= Fonction pour supprimer une classe CSS =================*/
/**
 * Supprime une classe CSS d'un √©l√©ment HTML.
 *
 * @param {HTMLElement} element - √âl√©ment HTML cible.
 * @param {string} className - Nom de la classe CSS √† supprimer.
 * @returns {boolean} - `true` si la classe a √©t√© supprim√©e, `false` si elle n'√©tait pas pr√©sente ou en cas d'erreur.
 */
export function removeClass(element, className) {
  // 1. V√©rifie que l'√©l√©ment est un √©l√©ment HTML valide
  if (!(element instanceof HTMLElement)) {
    logEvent(
      "error",
      'removeClass: Le param√®tre "element" n\'est pas un √©l√©ment HTML valide.',
      { element },
    );
    return false; // √âchec de l'op√©ration
  }

  // 2. V√©rifie que le nom de la classe est une cha√Æne non vide
  if (typeof className !== "string" || className.trim() === "") {
    logEvent("error", 'removeClass: Le param√®tre "className" est invalide.', {
      className,
    });
    return false; // √âchec de l'op√©ration
  }

  // 3. V√©rifie si la classe est pr√©sente sur l'√©l√©ment
  if (!element.classList.contains(className)) {
    logEvent(
      "info",
      `removeClass: La classe "${className}" n'est pas pr√©sente sur l'√©l√©ment.`,
      { element },
    );
    return false; // Pas besoin de retirer la classe
  }

  // 4. Retire la classe de l'√©l√©ment
  try {
    element.classList.remove(className);
    logEvent(
      "success",
      `removeClass: La classe "${className}" a √©t√© retir√©e avec succ√®s.`,
      { element },
    );
    return true; // Succ√®s de l'op√©ration
  } catch (error) {
    logEvent(
      "error",
      "removeClass: Une erreur est survenue lors de la suppression de la classe.",
      { error },
    );
    return false; // √âchec de l'op√©ration
  }
}
