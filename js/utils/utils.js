/* ========================================================
 * Nom du fichier : utils.js
 * Description    : Fonctions utilitaires pour le projet Fisheye
 * Auteur         : Trackozor
 * Date           : 01/01/2025
 * Version        : 1.1.0 (Optimis√©e)
 * ======================================================== */

import {
  CONFIGLOG,
  ENVIRONMENTS,
  ACTIVE_ENVIRONMENT,
} from "../config/constants.js";

/* ========================= Fonction utilitaire : V√©rification des logs ========================= */
/**
 * V√©rifie si un type de log est activ√© en fonction de la configuration globale.
 *
 * @param {string} type - Type de log (info, warn, error, etc.).
 * @returns {boolean} - `true` si le log est activ√©, sinon `false`.
 */

export const isLogEnabled = (level) => {
  // Cartographie des niveaux de log autoris√©s par niveau de verbosit√©
  const verbosityMap = {
    low: ["error", "warn"], // Verbosit√© basse : uniquement les erreurs et avertissements
    medium: ["error", "warn", "success"], // Verbosit√© moyenne : ajoute les succ√®s
    high: ["error", "warn", "success", "info", "test_start", "test_end"], // Verbosit√© haute : tous les niveaux
  };

  // Obtenir les niveaux autoris√©s selon la verbosit√©
  const allowedLevels = verbosityMap[CONFIGLOG.VERBOSITY] || [];

  // Conditions pour d√©terminer si un log est activ√©
  const isLevelEnabledInConfig = CONFIGLOG.LOG_LEVELS[level]; // Niveau activ√© dans la config
  const isAllowedByVerbosity = allowedLevels.includes(level); // Niveau autoris√© par la verbosit√©
  const isEnvironmentAllowed =
    ACTIVE_ENVIRONMENT === ENVIRONMENTS.DEVELOPMENT || // Autoriser tous les logs en dev
    !["info", "test_start", "test_end"].includes(level); // Limiter certains logs aux dev/staging

  // Retourner `true` si toutes les conditions sont remplies
  return isLevelEnabledInConfig && isAllowedByVerbosity && isEnvironmentAllowed;
};

/* ========================= Fonction utilitaire : Logger ========================= */
/**
 * Logue des √©v√©nements dans la console avec horodatage, ic√¥nes et styles.
 *
 * @param {string} type - Type de log : 'info', 'warn', 'error', etc.
 * @param {string} message - Message √† loguer.
 * @param {Object} [data={}] - Donn√©es suppl√©mentaires pour contexte.
 */
export const logEvent = (type, message, data = {}) => {
  // Validation du type de log
  if (!type || typeof type !== "string") {
    console.error("logEvent : Type de log invalide ou non d√©fini.", { type });
    return;
  }

  // R√©cup√©ration des m√©tadonn√©es pour le log
  const timestamp = new Date().toLocaleTimeString();
  const prefix = `[Fisheye][${timestamp}]`;
  const icon =
    CONFIGLOG.LOG_ICONS?.[type] || CONFIGLOG.LOG_ICONS?.default || "üîµ";
  const style =
    CONFIGLOG.LOG_STYLES?.[type] ||
    CONFIGLOG.LOG_STYLES?.default ||
    "color: black;";
  const fullMessage = `${icon} ${prefix} ${type.toUpperCase()}: ${message}`;

  try {
    // V√©rifie si `console[type]` est disponible
    if (console[type] && typeof console[type] === "function") {
      console[type](`%c${fullMessage}`, style, data);
    } else {
      // Fallback sur `console.log` si `console[type]` n'existe pas
      console.log(`%c${fullMessage}`, style, data);
    }
  } catch (error) {
    // Gestion des erreurs dans logEvent
    console.error(
      "%cErreur dans logEvent :",
      CONFIGLOG.LOG_STYLES?.error || "color: red;",
      error,
    );
  }
};

/**
 * Ajoute une classe CSS √† un √©l√©ment HTML.
 *
 * @param {HTMLElement} element - √âl√©ment HTML cible.
 * @param {string} className - Nom de la classe CSS √† ajouter.
 * @returns {boolean} - `true` si la classe a √©t√© ajout√©e, `false` si elle √©tait d√©j√† pr√©sente ou en cas d'erreur.
 */
export function addClass(element, className) {
  // V√©rifie si l'√©l√©ment est valide
  if (!(element instanceof HTMLElement)) {
    logEvent(
      "error",
      'addClass: Le param√®tre "element" n\'est pas un √©l√©ment HTML valide.',
      { element },
    );
    return false; // √âchec de l'op√©ration
  }

  // V√©rifie si la classe est une cha√Æne de caract√®res valide
  if (typeof className !== "string" || className.trim() === "") {
    logEvent("error", 'addClass: Le param√®tre "className" est invalide.', {
      className,
    });
    return false; // √âchec de l'op√©ration
  }

  // V√©rifie si la classe est d√©j√† pr√©sente
  if (element.classList.contains(className)) {
    logEvent(
      "info"`addClass: La classe "${className}" est d√©j√† pr√©sente sur l'√©l√©ment.`,
      { element },
    );
    return false; // Pas besoin d'ajouter la classe
  }

  // Ajoute la classe √† l'√©l√©ment
  try {
    element.classList.add(className);
    logEvent(
      "success",
      `addClass: La classe "${className}" a √©t√© ajout√©e avec succ√®s.`,
      { element },
    );
    return true; // Succ√®s de l'op√©ration
  } catch (error) {
    logEvent(
      "error",
      "addClass: Une erreur est survenue lors de l'ajout de la classe.",
      { error },
    );
    return false; // √âchec de l'op√©ration
  }
}

/* ========================= Fonction pour supprimer une classe CSS =================*/
/**
 * Supprime une classe CSS d'un √©l√©ment HTML.
 *
 * @param {HTMLElement} element - √âl√©ment HTML cible.
 * @param {string} className - Nom de la classe CSS √† supprimer.
 * @returns {boolean} - `true` si la classe a √©t√© supprim√©e, `false` si elle n'√©tait pas pr√©sente ou en cas d'erreur.
 */
export function removeClass(element, className) {
  // 1. V√©rifie que l'√©l√©ment est un √©l√©ment HTML valide
  if (!(element instanceof HTMLElement)) {
    logEvent(
      "error",
      'removeClass: Le param√®tre "element" n\'est pas un √©l√©ment HTML valide.',
      { element },
    );
    return false; // √âchec de l'op√©ration
  }

  // 2. V√©rifie que le nom de la classe est une cha√Æne non vide
  if (typeof className !== "string" || className.trim() === "") {
    logEvent("error", 'removeClass: Le param√®tre "className" est invalide.', {
      className,
    });
    return false; // √âchec de l'op√©ration
  }

  // 3. V√©rifie si la classe est pr√©sente sur l'√©l√©ment
  if (!element.classList.contains(className)) {
    logEvent(
      "info",
      `removeClass: La classe "${className}" n'est pas pr√©sente sur l'√©l√©ment.`,
      { element },
    );
    return false; // Pas besoin de retirer la classe
  }

  // 4. Retire la classe de l'√©l√©ment
  try {
    element.classList.remove(className);
    logEvent(
      "success",
      `removeClass: La classe "${className}" a √©t√© retir√©e avec succ√®s.`,
      { element },
    );
    return true; // Succ√®s de l'op√©ration
  } catch (error) {
    logEvent(
      "error",
      "removeClass: Une erreur est survenue lors de la suppression de la classe.",
      { error },
    );
    return false; // √âchec de l'op√©ration
  }
}

/**
 * D√©tecte la page actuelle √† partir de l'URL.
 * @returns {string} Nom de la page actuelle (par exemple, "index", "photographer").
 */
export const getCurrentPage = () => {
  const path = window.location.pathname;
  if (path.includes("index.html") || path === "/") {
    return "index";
  }
  if (path.includes("photographer.html")) {
    return "photographer";
  }
  return "unknown"; // Retourne "unknown" si la page est inconnue
};

/**
 * V√©rifie la pr√©sence de tous les s√©lecteurs pour une page donn√©e.
 * @param {Object} selectors - S√©lecteurs de la page en cours.
 * @returns {boolean} True si tous les s√©lecteurs sont pr√©sents, sinon False.
 */
export const verifySelectors = (selectors) => {
  const missingSelectors = [];

  const checkSelectors = (obj, parentKey = "") => {
    Object.entries(obj).forEach(([key, value]) => {
      const fullKey = `${parentKey}${key}`;

      // Exclure les s√©lecteurs sp√©cifiques
      if (
        fullKey === "photographerPage.totalLikes" ||
        fullKey === "photographerPage.dailyRate"
      ) {
        return;
      }

      if (typeof value === "object" && value !== null) {
        checkSelectors(value, `${fullKey}.`);
      } else if (!value) {
        missingSelectors.push(fullKey);
      }
    });
  };

  checkSelectors(selectors);

  if (missingSelectors.length > 0) {
    logEvent(
      "error",
      `‚ö†Ô∏è Les s√©lecteurs suivants sont manquants : ${missingSelectors.join(", ")}.`,
      {},
    );
    return false;
  }

  logEvent("success", "‚úÖ Tous les s√©lecteurs n√©cessaires sont pr√©sents.");
  return true;
};

/**
 * S√©lectionne de mani√®re s√©curis√©e un √©l√©ment DOM.
 * @param {string} selector - Le s√©lecteur CSS.
 * @returns {Element|null} √âl√©ment DOM correspondant ou null s'il n'existe pas.
 */
export const safeQuerySelector = (selector) => {
  try {
    return document.querySelector(selector);
  } catch (error) {
    logEvent(
      "error",
      `Erreur lors de la s√©lection de l'√©l√©ment : ${selector}`,
      {
        error,
      },
    );
    return null;
  }
};
