/* ========================================================
 * Nom du fichier : utils.js
 * Description    : Script JavaScript pour les fonctions utiliataires
 *                  
 * Auteur         : Trackozor
 * Date           : 01/01/2025
 * Version        : 1.0.0
 * ======================================================== */


/* =============================== */
/*       Configuration Globale     */
/* =============================== */

const CONFIG = {
     /* ====== Configuration des logs ====== */
    ENABLE_LOGS: true, // Permet d'activer ou de d√©sactiver les logs dans la console. Utile pour basculer entre les environnements (d√©veloppement/production).
    
     /* ====== Niveaux de Logs ====== */
    LOG_LEVELS: {
        default: true,
        info: true,  // Activer/D√©sactiver les logs d'information
        warn: true,  // Activer/D√©sactiver les avertissements
        error: true, // Activer/D√©sactiver les erreurs
        success: true, // Activer/D√©sactiver les logs de succ√®s
        check: true, // Activer/D√©sactiver les logs de la checkbox info
        checkfinal:true,
    },

    /*====== Classes CSS utilis√©es ======*/
    CSS_CLASSES: {
        ERROR_INPUT: 'error-input', // Classe CSS pour styliser un champ avec une erreur (ex : bordure rouge).
        ERROR_MODAL: 'error-modal', // Classe CSS pour afficher une erreur dans la modale.
        MODAL_ACTIVE: 'active',  // Classe CSS pour indiquer qu'une modale est active et visible.
        BODY_NO_SCROLL: 'no-scroll', // Classe CSS pour emp√™cher le d√©filement de la page lorsque la modale est ouverte.
        NAV_RESPONSIVE: 'responsive', // Classe CSS pour activer le mode "responsive" du menu de navigation.
        HERO_DEFAULT: 'hero-default', // Classe CSS pour le style par d√©faut de la section "hero".
        HERO_RESPONSIVE: 'hero-responsive', // Classe CSS pour ajuster la section "hero" en mode responsive.
        MODAL_DEFAULT: 'modal-default', // Classe CSS pour le style par d√©faut de la modale.
        MODAL_RESPONSIVE: 'modal-responsive',  // Classe CSS pour adapter la modale au mode responsive.
    },


    /*====== styles tag log ======*/
    LOG_STYLES: {
        info: "color: blue; font-weight: bold;", // Style pour les messages d'information.
        warn: "color: orange; font-weight: bold;", // Style pour les avertissements.
        error: "color: red; font-weight: bold;", // Style pour les erreurs critiques.
        success: "color: green; font-weight: bold;", // Style pour les messages indiquant une r√©ussite.
        default: "color: black;", // Style par d√©faut pour les messages qui ne correspondent pas √† un type sp√©cifique.
        check: "background-color: pink; color: purple;font-weight: bold;", // Style pour la checkbox d'info
        checkfinal:"background-color: green; color: white;font-weight: bold;", // Style pour la checkbox d'info
    },

    /*====== styles ic√¥ne log ======*/
    LOG_ICONS: {
        info: '‚ÑπÔ∏è',  // Ic√¥ne pour les messages d'information.
        warn: '‚ö†Ô∏è', // Ic√¥ne pour les avertissements.
        error: '‚ùå', // Ic√¥ne pour les erreurs critiques.
        success: '‚úÖ', // Ic√¥ne pour indiquer une r√©ussite.
        default: 'üîµ', // Ic√¥ne par d√©faut si le type de message n'est pas d√©fini.
    },

    /*====== Configuration des m√©dias ======*/
    MEDIA: {
        isMobile: window.matchMedia("(max-width: 1023px)").matches, // Indique si l'utilisateur utilise un appareil avec un √©cran de taille inf√©rieure ou √©gale √† 1024px.
    },
};

let modalOpen = false; // Variable globale pour suivre l'√©tat de la modale
let isCheckboxValid = false; // Indique si la checkbox est valide

/*================================================================================================================================================*/
/*========================================================================================*/
/*                       =========== Fonctions utilitaires ===================            */
/*========================================================================================*/

/*======================Fonction log console==============================================*/
/**
 * Log les √©v√©nements dans la console avec horodatage, ic√¥nes et styles personnalis√©s.
 * 
 * √âtapes principales :
 * 1. V√©rifie si les logs sont activ√©s globalement (`CONFIG.ENABLE_LOGS`).
 * 2. Filtre les logs en fonction des niveaux activ√©s dans `CONFIG.LOG_LEVELS`.
 * 3. R√©cup√®re l'horodatage et construit un pr√©fixe pour identifier l'origine du log.
 * 4. Associe une ic√¥ne et un style au log en fonction de son type.
 * 5. Valide que le message est fourni avant d'afficher quoi que ce soit.
 * 6. Affiche le log dans la console avec un style format√©, ou g√®re les erreurs si elles surviennent.
 *
 * @param {string} type - Niveau du log : 'info', 'warn', 'error', 'success', etc.
 * @param {string} message - Description de l'√©v√©nement √† loguer.
 * @param {Object} [data={}] - (Optionnel) Donn√©es suppl√©mentaires li√©es au log.
 * 
 * @example
 * logEvent('info', 'Chargement termin√©', { module: 'Formulaire', status: 'OK' });
 * logEvent('error', '√âchec de la validation', { field: 'email', reason: 'Format invalide' });
 */

export function logEvent(type, message, data = {}) {
    
    /* 1. V√©rifie si les logs sont activ√©s via CONFIG.ENABLE_LOGS.*/  
    if (!CONFIG.ENABLE_LOGS) {
        return; // Si les logs sont d√©sactiv√©s, sortir de la fonction imm√©diatement.
    }

    // V√©rifie si le type de log est activ√© dans LOG_LEVELS
    if (!CONFIG.LOG_LEVELS[type]) {
        return; // Si le type de log est d√©sactiv√©, ne rien afficher
    }

    /* 2. R√©cup√®re l'horodatage et construit un pr√©fixe pour identifier la source du log.*/
    const timestamp = new Date().toLocaleTimeString(); // R√©cup√®re l'heure actuelle au format HH:MM:SS.
    const prefix = `[Fisheye][${timestamp}]`; // Pr√©fixe standard pour identifier les logs et horodatage.

    /*3. S√©lectionne une ic√¥ne, un style en fonction du type de log  et construit le message complet avec le type, l'ic√¥ne, et le contenu.*/
    const icon = CONFIG.LOG_ICONS[type] || CONFIG.LOG_ICONS.default;// Ic√¥ne par d√©faut si le type est inconnu    
    const style = CONFIG.LOG_STYLES[type] || CONFIG.LOG_STYLES.default ;// R√©cup√®re le style appropri√© depuis `logStyles` en fonction du type (info, warn, error).
    const fullMessage = `${icon} ${prefix} ${type.toUpperCase()}: ${message}`; // Message complet √† afficher.

    /*4. V√©rifie si le message est vide pour √©viter les logs inutiles.*/
    if (!message) {
        console.warn('%c[AVERTISSEMENT] Aucun message fourni dans logEvent', style);
        return;
    }

    /* 5. Affiche le log dans la console en utilisant le type dynamique (info, warn, error, etc.).*/
    try {
    console[type] 
        ? console[type](`%c${fullMessage}`, style, data) 
        : console.log(`%c${fullMessage}`, style, data);
    } catch (error) {
        console.error('Erreur dans logEvent :', error);
    }

}

/* ========================= Fonction pour ajouter une classe CSS =================*/
/**
 * Ajoute une classe CSS √† un √©l√©ment HTML.
 * 
 * @param {HTMLElement} element - √âl√©ment HTML cible.
 * @param {string} className - Nom de la classe CSS √† ajouter.
 * @returns {boolean} - `true` si la classe a √©t√© ajout√©e, `false` si elle √©tait d√©j√† pr√©sente ou en cas d'erreur.
 */
export function addClass(element, className) {
    // V√©rifie si l'√©l√©ment est valide
    if (!(element instanceof HTMLElement)) {
        logEvent('error','addClass: Le param√®tre "element" n\'est pas un √©l√©ment HTML valide.', { element });
        return false; // √âchec de l'op√©ration
    }

    // V√©rifie si la classe est une cha√Æne de caract√®res valide
    if (typeof className !== 'string' || className.trim() === '') {
        logEvent('error','addClass: Le param√®tre "className" est invalide.', { className });
        return false; // √âchec de l'op√©ration
    }

    // V√©rifie si la classe est d√©j√† pr√©sente
    if (element.classList.contains(className)) {
        logEvent('info'`addClass: La classe "${className}" est d√©j√† pr√©sente sur l'√©l√©ment.`, { element });
        return false; // Pas besoin d'ajouter la classe
    }

    // Ajoute la classe √† l'√©l√©ment
    try {
        element.classList.add(className);
        logEvent('success',`addClass: La classe "${className}" a √©t√© ajout√©e avec succ√®s.`, { element });
        return true; // Succ√®s de l'op√©ration
    } catch (error) {
        logEvent('error','addClass: Une erreur est survenue lors de l\'ajout de la classe.', { error });
        return false; // √âchec de l'op√©ration
    }
}



/* ========================= Fonction pour supprimer une classe CSS =================*/
/**
 * Supprime une classe CSS d'un √©l√©ment HTML.
 * 
 * @param {HTMLElement} element - √âl√©ment HTML cible.
 * @param {string} className - Nom de la classe CSS √† supprimer.
 * @returns {boolean} - `true` si la classe a √©t√© supprim√©e, `false` si elle n'√©tait pas pr√©sente ou en cas d'erreur.
 */
export function removeClass(element, className) {
    // 1. V√©rifie que l'√©l√©ment est un √©l√©ment HTML valide
    if (!(element instanceof HTMLElement)) {
        logEvent('error','removeClass: Le param√®tre "element" n\'est pas un √©l√©ment HTML valide.', { element });
        return false; // √âchec de l'op√©ration
    }

    // 2. V√©rifie que le nom de la classe est une cha√Æne non vide
    if (typeof className !== 'string' || className.trim() === '') {
        logEvent('error','removeClass: Le param√®tre "className" est invalide.', { className });
        return false; // √âchec de l'op√©ration
    }

    // 3. V√©rifie si la classe est pr√©sente sur l'√©l√©ment
    if (!element.classList.contains(className)) {
        logEvent('info',`removeClass: La classe "${className}" n'est pas pr√©sente sur l'√©l√©ment.`, { element });
        return false; // Pas besoin de retirer la classe
    }

    // 4. Retire la classe de l'√©l√©ment
    try {
        element.classList.remove(className);
        logEvent('success',`removeClass: La classe "${className}" a √©t√© retir√©e avec succ√®s.`, { element });
        return true; // Succ√®s de l'op√©ration
    } catch (error) {
        logEvent('error','removeClass: Une erreur est survenue lors de la suppression de la classe.', { error });
        return false; // √âchec de l'op√©ration
    }
}
