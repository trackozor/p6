// ========================================================
// Fichier : eventHandler.js
// Description : Gestion centralis√©e des √©v√©nements pour la modale,
//               la lightbox et le tri des m√©dias.
// Auteur : Trackozor
// Date : 08/01/2025
// Version : 3.0 (Optimisation, Robustesse, S√©curit√©)
// ========================================================

/*==============================================*/
/*               IMPORTS                        */
/*==============================================*/

import { logEvent } from "../utils/utils.js";
import domSelectors from "../config/domSelectors.js";

/*------------------ Modales ------------------*/
import {
  launchModal,
  closeModal,
  closeConfirmationModal,
} from "../components/modal/modalManager.js";

/*------------------ M√©dias ------------------*/
import { handleMediaSort } from "../components/sort/sortlogic.js";
import {
  openLightbox,
  showPreviousMedia,
  showNextMedia,
  closeLightbox,
} from "../components/lightbox/lightbox.js";

/*------------------ Donn√©es ------------------*/
import { fetchMedia } from "../data/dataFetcher.js";

/*------------------ UI & Accessibilit√© ------------------*/

import { trapFocus } from "../utils/accessibility.js";
import { initvalidform } from "../utils/contactForm.js";

/*------------------ Clavier ------------------*/
import { KEY_CODES } from "../config/constants.js";
import {
  handleEscapeKey,
  handleLightboxNavigation,
} from "./keyboardHandler.js";

/*==============================================*/
/*         Gestion des Modales                  */
/*==============================================*/
/*==============================================*/
/*        Ouverture modale contact              */
/*==============================================*/
/**
 * G√®re l'ouverture de la modale de contact d'un photographe.
 * 
 * ### **Fonctionnement :**
 * - R√©cup√®re les donn√©es des photographes via une requ√™te asynchrone.
 * - V√©rifie que les donn√©es sont valides avant d'afficher la modale.
 * - Extrait l'ID du photographe √† partir de l'URL actuelle.
 * - Recherche le photographe correspondant dans les donn√©es.
 * - Ouvre la modale si toutes les conditions sont remplies.
 * - G√®re les erreurs et affiche un message en cas d'√©chec.
 * - Utilise une classe CSS `loading` sur le `<body>` pour am√©liorer l'exp√©rience utilisateur.
 * 
 * ### **Gestion des erreurs :**
 * - L√®ve une erreur si les donn√©es des photographes sont manquantes.
 * - L√®ve une erreur si l'ID du photographe est absent de l'URL.
 * - L√®ve une erreur si le photographe correspondant n'est pas trouv√©.
 * - Capture et journalise toute erreur via `logEvent("error", ...)`.
 * - Affiche une alerte utilisateur si un probl√®me survient.
 * 
 * @async
 * @function handleModalOpen
 * @throws {Error} G√©n√®re une erreur si l'un des √©l√©ments requis (donn√©es, ID photographe, etc.) est manquant ou invalide.
 */

export async function handleModalOpen() {
  logEvent("info", "Appel √† l'ouverture de la modale.");
  try {
    // R√©cup√®re les donn√©es des photographes depuis l'API ou la base de donn√©es
    const mediaData =  await fetchMedia();

    if (!mediaData?.photographers) {
      throw new Error("Donn√©es photographes manquantes.");
    }

    const photographerId = new URLSearchParams(window.location.search).get("id");

    if (!photographerId) {
      throw new Error("ID photographe introuvable dans l'URL.");
    }

    const photographerData = mediaData.photographers.find(
      (photographer) => photographer.id === parseInt(photographerId, 10)
    );

    if (!photographerData) {
      throw new Error(`Photographe ID ${photographerId} introuvable.`);
    }

    // Ouvre la modale avec les informations du photographe
    launchModal(photographerData);

    // Ajoute un √©couteur pour la fermeture de la modale
    setTimeout(() => {
      const modal = document.querySelector(".modal.modal-active");
      if (modal) {
        const firstInput = modal.querySelector("input, textarea, select");
        if (firstInput) {
          firstInput.focus();
          logEvent("success", "Focus plac√© sur le premier champ interactif.");
        } else {
          logEvent("warn", "Aucun champ interactif trouv√© pour focus.");
        }
      }
    }, 100); // Petit d√©lai pour s'assurer que la modale est bien affich√©e

    logEvent("success", "Modale ouverte avec succ√®s.");
  } catch (error) {
    logEvent("error", `Erreur d'ouverture de la modale: ${error.message}`, { error });
    alert("Erreur lors du chargement de la modale.");
  } finally {
    document.body.classList.remove("loading");
  }
}

/*==============================================*/
/*        Fermeture  modale contact             */
/*==============================================*/

/**
 * G√®re la fermeture de la modale de contact.
 * 
 * ### **Fonctionnement :**
 * - D√©clenche la fermeture de la modale via `closeModal()`.
 * - V√©rifie que la fermeture s'effectue sans erreur.
 * - Capture et journalise toute erreur √©ventuelle.
 * - Utilise `logEvent()` pour suivre l'√©tat de l'op√©ration.
 * 
 * ### **Gestion des erreurs :**
 * - Capture toute exception survenant lors de la fermeture.
 * - Journalise l'erreur via `logEvent("error", ...)`.
 * 
 * @function handleModalClose
 * @throws {Error} G√©n√®re une erreur si la fermeture de la modale √©choue.
 */

export function handleModalClose() {
  // Indique dans les logs que le processus de fermeture commence
  logEvent("info", "Fermeture de la modale.");

  try {
    // Ferme la modale via la fonction d√©di√©e
    closeModal();

    // Enregistre dans les logs que la modale a √©t√© ferm√©e avec succ√®s
    logEvent("success", "Modale ferm√©e.");
  } catch (error) {
    // Capture et journalise toute erreur survenant lors de la fermeture
    logEvent("error", "Erreur lors de la fermeture de la modale", { error });
  }
}


/*==============================================*/

export function handleGalleryNavigation(event, direction) {
    let mediaGallery = document.querySelector("#gallery"); // üìå Cible bien la div qui contient les m√©dias
    if (!mediaGallery) {
        logEvent("error", "handleGalleryNavigation : #gallery introuvable.");
        return;
    }

    const mediaItems = Array.from(mediaGallery.querySelectorAll(".media-item")); // ‚úÖ R√©cup√®re tous les m√©dias affich√©s
    let activeMedia = document.querySelector(".media-item.selected"); // üîç Trouve l'√©l√©ment actuellement s√©lectionn√©

    let currentIndex = mediaItems.findIndex(item => item === activeMedia);
    if (currentIndex === -1) {
        currentIndex = 0; // Si aucun m√©dia n'est s√©lectionn√©, d√©marre au premier
    }

    const videoElement = activeMedia?.querySelector("video");

    // üö® **Emp√™cher la navigation si une vid√©o est en lecture**
    if (videoElement && !videoElement.paused) {
        logEvent("warn", "handleGalleryNavigation : Une vid√©o est en lecture, blocage de la navigation.");
        event.preventDefault();
        return;
    }

    // üîÑ **D√©filement dans la galerie**
    if (direction === "vertical") {
        if (event.key === "ArrowUp") {
            currentIndex = (currentIndex - 1 + mediaItems.length) % mediaItems.length;
        } else if (event.key === "ArrowDown") {
            currentIndex = (currentIndex + 1) % mediaItems.length;
        }
    } else if (direction === "horizontal") {
        if (event.key === "ArrowLeft") {
            currentIndex = (currentIndex - 1 + mediaItems.length) % mediaItems.length;
        } else if (event.key === "ArrowRight") {
            currentIndex = (currentIndex + 1) % mediaItems.length;
        }
    }

    // Met √† jour la s√©lection
    mediaItems.forEach(item => item.classList.remove("selected")); // üîπ Retire la s√©lection des autres m√©dias
    mediaItems[currentIndex].classList.add("selected"); // üîπ Ajoute la classe active au nouvel √©l√©ment s√©lectionn√©
    mediaItems[currentIndex].scrollIntoView({ behavior: "smooth", block: "center", inline: "center" });

    // Pi√®ge le focus sur l'√©l√©ment s√©lectionn√©
    mediaItems[currentIndex].setAttribute("tabindex", "0");
    mediaItems[currentIndex].focus();

    // D√©sactiver tabindex sur les autres √©l√©ments
    mediaItems.forEach((item, index) => {
        if (index !== currentIndex) {
            item.setAttribute("tabindex", "-1");
        }
    });

    logEvent("info", `handleGalleryNavigation : M√©dia s√©lectionn√© (Index ${currentIndex})`);
}


/*==============================================*/
/*        ouverture modale confirmation         */
/*==============================================*/
/**
 * G√®re la confirmation d'une action dans une modale de confirmation.
 * 
 * ### **Fonctionnement :**
 * - Journalise l'acceptation de la confirmation.
 * - Ferme la modale de confirmation en appelant `closeConfirmationModal()`.
 * - Capture et journalise toute erreur √©ventuelle.
 * 
 * ### **Gestion des erreurs :**
 * - V√©rifie que `closeConfirmationModal()` est bien d√©fini avant de l'ex√©cuter.
 * - Capture toute exception survenant lors de la fermeture de la modale.
 * - Journalise l'erreur via `logEvent("error", ...)`.
 * 
 * @function handleModalConfirm
 * @throws {Error} G√©n√®re une erreur si la fermeture de la modale √©choue.
 */

export function handleModalConfirm() {
  // Indique dans les logs que l'utilisateur a valid√© une action
  logEvent("info", "Confirmation accept√©e. Fermeture de la modale...");

  try {
    // Ferme la modale de confirmation via la fonction d√©di√©e
    closeConfirmationModal();

    // Enregistre dans les logs que la modale a bien √©t√© ferm√©e
    logEvent("success", "Modale de confirmation ferm√©e avec succ√®s.");
  } catch (error) {
    // Capture et journalise toute erreur survenant lors de la fermeture
    logEvent("error", "Erreur lors de la fermeture de la modale de confirmation", { error });
  }
}




/*==============================================*/
/*           Soumission formulaire              */
/*==============================================*/
/**
 * G√®re la soumission du formulaire de contact.
 * 
 * ### **Fonctionnement :**
 * - Emp√™che le rechargement de la page (`event.preventDefault()`).
 * - Journalise l'√©v√©nement de soumission du formulaire.
 * - Affiche un indicateur de chargement (`showLoader()`).
 * - Lance la validation et le traitement du formulaire via `initvalidform()`.
 * - Capture et journalise toute erreur pouvant survenir durant la soumission.
 * 
 * ### **Gestion des erreurs :**
 * - V√©rifie que `event` est bien d√©fini avant d'appeler `preventDefault()`.
 * - V√©rifie que les fonctions `showLoader()` et `initvalidform()` existent bien avant de les ex√©cuter.
 * - Capture et journalise toute exception inattendue.
 * 
 * @function handleFormSubmit
 * @param {Event} event - L'√©v√©nement `submit` d√©clench√© par l'utilisateur.
 * @throws {Error} G√©n√®re une erreur si la soumission du formulaire √©choue.
 */

export function handleFormSubmit(event) {
  try {
    //  V√©rifie si event existe et emp√™che la soumission par d√©faut
    if (event) {
      event.preventDefault();
    } else {
      logEvent("warn", "handleFormSubmit() a √©t√© appel√© sans √©v√©nement. V√©rifiez son attachement.");
    }

    logEvent("info", "Soumission du formulaire de contact en cours...");
  
    if (typeof initvalidform === "function") {
      initvalidform();
    } else {
      throw new Error("initvalidform() est introuvable ou non d√©finie.");
    }

    logEvent("success", " Le formulaire de contact a √©t√© soumis avec succ√®s.");
  } catch (error) {
    logEvent("error", ` Erreur lors de la soumission du formulaire : ${error.message}`, { error });
    alert("Une erreur est survenue lors de la soumission du formulaire. Veuillez r√©essayer.");
  }
}



/*==============================================*/
/*         Gestion de la Lightbox               */
/*==============================================*/
/*==============================================*/
/*             Ouverture lightbox              */
/*==============================================*/
/**
 * Ouvre la lightbox avec un m√©dia sp√©cifique s√©lectionn√© dans la galerie.
 * 
 * ### **Fonctionnement :**
 * - V√©rifie que `mediaArray` est valide et contient des m√©dias.
 * - R√©cup√®re l'√©l√©ment cliqu√© dans la galerie via `event.target.closest(".gallery-item")`.
 * - R√©cup√®re l'index du m√©dia dans l'attribut `data-index` du `galleryItem`.
 * - Assure que `mediaList` et `globalFolderName` sont bien d√©finis.
 * - Appelle `openLightbox()` pour afficher le m√©dia s√©lectionn√©.
 * - Capture et journalise toute erreur potentielle.
 * 
 * ### **Gestion des erreurs :**
 * - V√©rifie que `mediaArray` est un tableau valide et non vide.
 * - V√©rifie que l'√©v√©nement `event.target` est d√©fini et correspond bien √† un √©l√©ment `.gallery-item`.
 * - V√©rifie que `data-index` contient bien un nombre valide.
 * - Capture et journalise toute erreur rencontr√©e.
 * 
 * @function handleLightboxOpen
 * @param {Event} event - L'√©v√©nement `click` d√©clench√© sur un m√©dia de la galerie.
 * @param {Array} mediaArray - Tableau contenant les m√©dias disponibles.
 * @param {string} folderName - Nom du dossier contenant les m√©dias.
 * @throws {Error} G√©n√®re une erreur si le m√©dia s√©lectionn√© est invalide ou si `mediaArray` est incorrect.
 */

export function handleLightboxOpen(event, mediaArray, folderName) {
  try {
      logEvent("debug", "handleLightboxOpen() d√©clench√©.", { event });

      if (!Array.isArray(mediaArray) || mediaArray.length === 0) {
          logEvent("error", " mediaArray est vide ou invalide !");
          throw new Error("mediaArray est vide ou invalide !");
      }

      logEvent("info", ` √âl√©ment cliqu√© : ${event.target.tagName}`, { eventTarget: event.target });

      // R√©cup√®re l'√©l√©ment `.gallery-item` cliqu√© ou la vid√©o
      let galleryItem = event.target.closest(".gallery-item");

      // Si on clique directement sur une vid√©o, on capture son parent `.gallery-item`
      if (!galleryItem && event.target.tagName === "VIDEO") {
          logEvent("warn", "‚ö† Clic d√©tect√© sur une vid√©o, remont√©e vers .gallery-item...");
          galleryItem = event.target.closest(".gallery-item");
          event.preventDefault(); // Emp√™che l'avance rapide de 10s
      }

      if (!galleryItem) {
          logEvent("error", " Aucun m√©dia s√©lectionn√©, le clic a √©t√© ignor√©.");
          throw new Error("Aucun m√©dia s√©lectionn√©.");
      }

      logEvent("success", " √âl√©ment .gallery-item d√©tect√© avec succ√®s.", { galleryItem });

      // V√©rification si c'est une vid√©o et d√©sactivation temporaire des contr√¥les
      const videoElement = galleryItem.querySelector("video");
      if (videoElement) {
          logEvent("info", "Vid√©o d√©tect√©e, d√©sactivation temporaire des contr√¥les.");
          videoElement.removeAttribute("controls"); // Emp√™che l'interception du clic
      }

      // R√©cup√®re l'index du m√©dia
      const mediaIndex = parseInt(galleryItem.dataset.index, 10);
      if (isNaN(mediaIndex) || mediaIndex < 0 || mediaIndex >= mediaArray.length) {
          logEvent("error", " Index m√©dia invalide ou hors limites.", { mediaIndex });
          throw new Error("Index m√©dia invalide ou hors limites.");
      }

      logEvent("success", ` M√©dia s√©lectionn√© √† l'index ${mediaIndex}. Ouverture de la lightbox...`);

      window.mediaList = mediaArray;
      window.globalFolderName = folderName;

      openLightbox(mediaIndex, mediaArray, folderName);

      // R√©activer les contr√¥les apr√®s un court d√©lai pour √©viter l'interf√©rence
      setTimeout(() => {
          if (videoElement) {
              logEvent("info", " R√©activation des contr√¥les vid√©o.");
              videoElement.setAttribute("controls", "true");
          }
      }, 300);

      logEvent("success", " Lightbox ouverte avec succ√®s.");

  } catch (error) {
      logEvent("error", ` Erreur lors de l'ouverture de la lightbox : ${error.message}`, { error });
  }
}


/*==============================================*/
/*              Fermeture lightbox              */
/*==============================================*/
/**
 * G√®re la fermeture de la lightbox.
 * 
 * ### **Fonctionnement :**
 * - Journalise le d√©but de la fermeture de la lightbox.
 * - Ex√©cute la fonction `closeLightbox()` pour fermer la lightbox.
 * - Capture et journalise toute erreur survenant lors de la fermeture.
 * 
 * ### **Gestion des erreurs :**
 * - V√©rifie que `closeLightbox()` est bien d√©finie avant de l'ex√©cuter.
 * - Capture toute exception en cas d'√©chec de la fermeture.
 * - Journalise l'erreur via `logEvent("error", ...)`.
 * 
 * @function handleLightboxClose
 * @throws {Error} G√©n√®re une erreur si la fermeture de la lightbox √©choue.
 */

export function handleLightboxClose() {
  try {
    // Journalisation du d√©but de la fermeture de la lightbox
    logEvent("info", "Fermeture de la lightbox en cours...");

    // V√©rifie que la fonction `closeLightbox` est bien d√©finie avant de l'ex√©cuter
    if (typeof closeLightbox !== "function") {
      throw new Error("closeLightbox() est introuvable ou non d√©finie.");
    }

    // Ex√©cute la fermeture de la lightbox
    closeLightbox();

    // Journalisation du succ√®s de la fermeture
    logEvent("success", "Lightbox ferm√©e avec succ√®s.");
  } catch (error) {
    // Capture et journalise toute erreur rencontr√©e
    logEvent("error", `Erreur lors de la fermeture de la lightbox : ${error.message}`, { error });
  }
}
export function handleLightboxBackgroundClick(event) {
  try {
    if (!event || !event.target) {
      throw new Error("√âv√©nement invalide ou non d√©fini.");
    }

    // S√©lectionne les √©l√©ments qui ne doivent PAS fermer la lightbox
    const lightboxMedia = document.querySelector(".lightbox-media-container");
    const prevButton = document.querySelector(".lightbox-prev");
    const nextButton = document.querySelector(".lightbox-next");
    const closeButton = document.querySelector(".lightbox-close");

    logEvent("debug", "Clic d√©tect√© dans la lightbox", { clickedElement: event.target });

    // V√©rifie si l'√©l√©ment cliqu√© est un bouton ou le m√©dia
    if (
      event.target === lightboxMedia ||
      event.target === prevButton ||
      event.target === nextButton ||
      event.target === closeButton
    ) {
      logEvent("debug", "Clic d√©tect√© sur un √©l√©ment de navigation ou le m√©dia, la lightbox ne doit pas se fermer.");
      return;
    }

    // Si c'est l'overlay (arri√®re-plan), fermer la lightbox
    if (event.target === domSelectors.lightbox.lightboxOverlay) {
      logEvent("info", "Clic d√©tect√© sur l'overlay. Fermeture de la lightbox.");
      
    }

  } catch (error) {
    logEvent("error", `Erreur lors du clic sur l'arri√®re-plan de la lightbox : ${error.message}`, { error });
  }
}



/*==============================================*/
/*              Nav pr√©c√©dente                  */
/*==============================================*/
/**
 * G√®re la navigation vers le m√©dia pr√©c√©dent dans la lightbox.
 * 
 * ### **Fonctionnement :**
 * - V√©rifie que `window.mediaList` est d√©fini et contient des m√©dias.
 * - Si aucun m√©dia n'est disponible, journalise une erreur et stoppe l'ex√©cution.
 * - Journalise l'action de navigation avant de passer au m√©dia pr√©c√©dent.
 * - Appelle `showPreviousMedia()` pour afficher le m√©dia pr√©c√©dent.
 * 
 * ### **Gestion des erreurs :**
 * - V√©rifie que `window.mediaList` est d√©fini et non vide avant de proc√©der.
 * - Capture et journalise toute erreur inattendue.
 * 
 * @function handleLightboxPrev
 * @throws {Error} G√©n√®re une erreur si `mediaList` est vide ou non d√©fini.
 */

export function handleLightboxPrev() {
  try {
    // V√©rifie que `mediaList` est d√©fini et contient au moins un m√©dia
    if (!window.mediaList || window.mediaList.length === 0) {
      throw new Error("Aucun m√©dia disponible pour la navigation.");
    }

    // Journalisation de l'action de navigation
    logEvent("info", "Navigation vers le m√©dia pr√©c√©dent dans la lightbox.");

    // Affiche le m√©dia pr√©c√©dent
    showPreviousMedia();

  } catch (error) {
    // Capture et journalise toute erreur rencontr√©e
    logEvent("error", `Erreur lors de la navigation vers le m√©dia pr√©c√©dent : ${error.message}`, { error });
  }
}

/*==============================================*/
/*                 Nav suivante                 */
/*==============================================*/

/**
 * G√®re la navigation vers le m√©dia suivant dans la lightbox.
 * 
 * ### **Fonctionnement :**
 * - V√©rifie que `window.mediaList` est d√©fini et contient des m√©dias.
 * - Si aucun m√©dia n'est disponible, journalise une erreur et stoppe l'ex√©cution.
 * - Journalise l'action de navigation avant de passer au m√©dia suivant.
 * - Appelle `showNextMedia()` pour afficher le m√©dia suivant.
 * 
 * ### **Gestion des erreurs :**
 * - V√©rifie que `window.mediaList` est d√©fini et non vide avant de proc√©der.
 * - Capture et journalise toute erreur inattendue.
 * 
 * @function handleLightboxNext
 * @throws {Error} G√©n√®re une erreur si `mediaList` est vide ou non d√©fini.
 */

export function handleLightboxNext() {
  try {
    // V√©rifie que `mediaList` est d√©fini et contient au moins un m√©dia
    if (!window.mediaList || window.mediaList.length === 0) {
      throw new Error("Aucun m√©dia disponible pour la navigation.");
    }

    // Journalisation de l'action de navigation
    logEvent("info", "Navigation vers le m√©dia suivant dans la lightbox.");

    // Affiche le m√©dia suivant
    showNextMedia();

  } catch (error) {
    // Capture et journalise toute erreur rencontr√©e
    logEvent("error", `Erreur lors de la navigation vers le m√©dia suivant : ${error.message}`, { error });
  }
}



/*==============================================*/
/*         Gestion du Tri des M√©dias            */
/*==============================================*/

/**
 * G√®re le changement de tri des m√©dias en fonction de l'option s√©lectionn√©e par l'utilisateur.
 * 
 * ### **Fonctionnement :**
 * - R√©cup√®re la valeur de l'option de tri s√©lectionn√©e (`event.target.value`).
 * - V√©rifie que la valeur est bien d√©finie et non vide.
 * - Journalise l'option s√©lectionn√©e dans `logEvent()`.
 * - Ex√©cute la fonction `handleMediaSort()` pour appliquer le tri.
 * - Capture et journalise toute erreur potentielle.
 * 
 * ### **Gestion des erreurs :**
 * - V√©rifie que `event.target` est bien d√©fini avant d'extraire `value`.
 * - V√©rifie que l'option de tri s√©lectionn√©e n'est pas vide.
 * - Capture et journalise toute erreur inattendue lors de l'ex√©cution de `handleMediaSort()`.
 * 
 * @async
 * @function handleSortChange
 * @param {Event} event - L'√©v√©nement `change` d√©clench√© lors de la s√©lection d'une option de tri.
 * @throws {Error} G√©n√®re une erreur si l'option de tri est invalide ou si `handleMediaSort` rencontre un probl√®me.
 */

export async function handleSortChange(event) {
  try {
    // V√©rifie que l'√©v√©nement et sa cible sont bien d√©finis
    if (!event || !event.target) {
      throw new Error("√âv√©nement de tri invalide ou non d√©fini.");
    }

    // R√©cup√®re la valeur de l'option s√©lectionn√©e
    const sortOption = event.target.value;

    // V√©rifie que l'utilisateur a bien s√©lectionn√© une option de tri
    if (!sortOption) {
      throw new Error("Aucune option de tri s√©lectionn√©e.");
    }

    // Journalisation de l'option de tri s√©lectionn√©e
    logEvent("info", `Option de tri s√©lectionn√©e : ${sortOption}`);

    // Applique le tri aux m√©dias
    await handleMediaSort(sortOption);

    // Journalisation du succ√®s du tri
    logEvent("success", "Tri des m√©dias appliqu√© avec succ√®s.");
  } catch (error) {
    // Capture et journalise toute erreur rencontr√©e
    logEvent("error", `Erreur lors du tri des m√©dias : ${error.message}`, { error });
  }
}

/**
 * G√®re le clic sur une ic√¥ne de like.
 * @param {Event} event - L'√©v√©nement d√©clench√© par le clic.
 * @param {HTMLElement} totalLikesElement - √âl√©ment affichant le total des likes.
 */
export function handleLikeClick(event, totalLikesElement) {
  try {
    const icon = event.target;
    const mediaItem = icon.closest(".media-item");

    if (!mediaItem) {
      throw new Error("√âl√©ment m√©dia introuvable.");
    }

    const mediaId = mediaItem.dataset.id;
    if (!mediaId) {
      throw new Error("ID m√©dia introuvable.");
    }

    const likeCounter = mediaItem.querySelector(".media-likes");
    if (!likeCounter) {
      throw new Error("Compteur de likes introuvable.");
    }

    let currentLikes = parseInt(likeCounter.textContent, 10) || 0;
    let totalLikes = parseInt(totalLikesElement.textContent, 10) || 0;

    if (icon.classList.contains("liked")) {
      // Si d√©j√† lik√©, on enl√®ve le like
      icon.classList.remove("liked");
      likeCounter.textContent = currentLikes - 1;
      totalLikesElement.textContent = totalLikes - 1;
      logEvent("info", `Like retir√© pour le m√©dia ID: ${mediaId}`);
    } else {
      // Sinon, on ajoute le like
      icon.classList.add("liked");
      likeCounter.textContent = currentLikes + 1;
      totalLikesElement.textContent = totalLikes + 1;
      logEvent("success", `Like ajout√© pour le m√©dia ID: ${mediaId}`);
    }
  } catch (error) {
    logEvent("error", `Erreur lors du clic sur un like: ${error.message}`, { error });
  }
}

/*==============================================*/
/*         Gestion des Interactions Clavier     */
/*==============================================*/

/**
 * G√®re les interactions clavier pour la navigation et l'accessibilit√© des modales et de la lightbox.
 * 
 * ### **Fonctionnement :**
 * - V√©rifie si une modale ou une lightbox est active.
 * - G√®re la touche `TAB` pour maintenir le focus dans la modale active (`trapFocus()`).
 * - G√®re la touche `ESCAPE` pour fermer la modale ou la lightbox (`handleEscapeKey()`).
 * - G√®re les fl√®ches gauche/droite (`‚Üê / ‚Üí`) pour naviguer dans la lightbox (`handleLightboxNavigation()`).
 * - Capture et journalise toute erreur survenant dans la gestion des √©v√©nements clavier.
 * 
 * ### **Gestion des erreurs :**
 * - V√©rifie que l'√©v√©nement `event.key` est bien d√©fini avant d'agir.
 * - Capture et journalise toute erreur inattendue.
 * 
 * @function handleKeyboardEvent
 * @param {KeyboardEvent} event - L'√©v√©nement clavier d√©clench√© par l'utilisateur.
 * @throws {Error} G√©n√®re une erreur si un probl√®me survient dans la gestion des interactions clavier.
 */

export function handleKeyboardEvent(event) {
  try {
      if (!event || !event.key) {
          throw new Error("√âv√©nement clavier invalide ou non d√©fini.");
      }

      logEvent("debug", "√âv√©nement clavier d√©tect√©.", { keyPressed: event.key });

      let mediaGallery = document.querySelector("#gallery"); 
      if (!mediaGallery) {
          logEvent("warn", "handleKeyboardEvent : √âl√©ment #gallery introuvable. Navigation d√©sactiv√©e.");
          return;
      }

      const activeModal = document.querySelector(".modal.modal-active");
      const activeLightbox = document.querySelector(".lightbox[aria-hidden='false']");
      const mediaItems = Array.from(document.querySelectorAll(".media-item")); // Liste des m√©dias dans la galerie
      const activeMedia = document.querySelector(".media-item.selected"); //  √âl√©ment actif dans la galerie

      logEvent("info", "V√©rification des √©l√©ments actifs.", {
          activeModal: !!activeModal,
          activeLightbox: !!activeLightbox,
          activeMedia: !!activeMedia
      });

      //  √âvite d'interf√©rer avec une vid√©o active
      if (document.activeElement.tagName === "VIDEO" && !document.activeElement.paused) {
          logEvent("warn", "handleKeyboardEvent : Vid√©o active d√©tect√©e, touches fl√©ch√©es d√©sactiv√©es.");
          return;
      }

      //  **D√©tecte les touches pour naviguer UNIQUEMENT dans la galerie**
      if (!activeLightbox && !activeModal) {
          switch (event.key) {
              case "ArrowLeft":
              case "ArrowRight":
                  handleGalleryNavigation(event, "horizontal");
                  break;
              case "ArrowUp":
              case "ArrowDown":
                  handleGalleryNavigation(event, "vertical");
                  break;
              case "Enter":
              case " ":
                  if (activeMedia) {
                      //  Trouver l'INDEX du m√©dia dans la **lightbox** et non juste la galerie
                      const mediaId = activeMedia.getAttribute("data-id"); //  ID du m√©dia
                      const mediaIndex = mediaList.findIndex(media => media.id == mediaId); // Trouve l‚Äôindex dans `mediaList`

                      if (mediaIndex !== -1) {
                          logEvent("info", `Ouverture de la lightbox pour index ${mediaIndex}`);
                          openLightbox(mediaIndex, mediaList, globalFolderName); //  Passe bien la liste et le dossier
                          event.preventDefault(); //  Emp√™che le scroll si c'est `Espace`
                      } else {
                          logEvent("error", "Aucun index valide trouv√© pour ouvrir la lightbox.");
                      }
                  }
                  break;
              default:
                  logEvent("warn", `Touche ${event.key} d√©tect√©e mais non prise en charge.`);
          }
      }
  } catch (error) {
      logEvent("error", "handleKeyboardEvent : Erreur critique lors de la gestion clavier.", { error });
      throw new Error(`Erreur dans handleKeyboardEvent : ${error.message}`);
  }
}





document.addEventListener("DOMContentLoaded", () => {
    document.addEventListener("keydown", handleKeyboardEvent);
    logEvent("success", "Gestionnaire d'√©v√©nements clavier activ√©.");
});



