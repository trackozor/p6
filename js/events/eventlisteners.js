// ========================================================
// Fichier : eventListeners.js
// Description : Gestion centralis√©e des √©v√©nements pour la modale,
//               la lightbox et le tri des m√©dias dans l'application.
// Auteur : Trackozor
// Date : 08/01/2025
// Version : 3.1 (Optimisation, tests et refactorisation compl√®te)
// ========================================================

/*==============================================*/
/*                   IMPORTS                    */
/*==============================================*/

// S√©lecteurs DOM
import domSelectors from "../config/domSelectors.js";

// Gestionnaires d'√©v√©nements
import {
  handleModalOpen, 
  handleModalClose,
  handleFormSubmit,
  handleLightboxClose,
  handleLightboxPrev,
  handleLightboxNext,
  handleLightboxOpen,
  handleSortChange,
  handleModalConfirm,
  updateCharCount,
  handleLikeClick,
} from "./eventHandler.js";

// Gestion des interactions clavier
import { handleKeyboardEvent } from "./keyboardHandler.js"

// Utilitaire de logs
import { logEvent } from "../utils/utils.js";



/*=======================================================*/
// UTILITAIRE : ATTACHER DES √âV√âNEMENTS
/*=======================================================*/


/**
 * Attache un √©v√©nement √† un ou plusieurs √©l√©ments de mani√®re s√©curis√©e.
 * 
 * @param {NodeList|HTMLElement} elements - √âl√©ment(s) cible(s) pour l'√©v√©nement.
 * @param {string} eventType - Type d'√©v√©nement √† √©couter (ex: "click").
 * @param {Function} callback - Fonction √† ex√©cuter lors de l'√©v√©nement.
 * @param {boolean} once - Si true, l'√©v√©nement ne s'ex√©cute qu'une seule fois.
 * @returns {boolean} - Retourne true si un √©v√©nement a √©t√© attach√©, false sinon.
 */
function attachEvent(elements, eventType, callback, once = false) {
  if (!elements) {
      logEvent("error", ` Aucun √©l√©ment trouv√© pour l'√©v√©nement "${eventType}".`);
      return false;
  }

  // Convertit un NodeList en tableau si plusieurs √©l√©ments sont s√©lectionn√©s
  const elementList = elements instanceof NodeList ? Array.from(elements) : [elements];

  elementList.forEach((element) => {
      if (element instanceof HTMLElement) {
          try {
              element.addEventListener(eventType, async (event) => {
                  try {
                      await callback(event);
                      return true; // Emp√™che l'attente infinie d'une r√©ponse asynchrone
                  } catch (error) {
                      logEvent("error", `Erreur dans l'ex√©cution de "${eventType}".`);
                  }
              }, { once });

              logEvent("success", ` √âv√©nement "${eventType}" attach√© √† ${element.className || element.id || "un √©l√©ment inconnu"}.`);
          } catch (error) {
              logEvent("error", `Impossible d'attacher l'√©v√©nement "${eventType}".`);
          }
      }
  });

  return elementList.length > 0;
}

/*=======================================================*/
// INITIALISATION DES √âV√âNEMENTS
/*=======================================================*/


/**
 * Initialise la modale de contact.
 * 
 * - V√©rifie que les √©l√©ments DOM de la modale existent.
 * - Attache les √©v√©nements n√©cessaires.
 * - Active un **MutationObserver** si le bouton de contact n'est pas imm√©diatement disponible.
 */
export function initModal() {
  logEvent("info", "‚û° Initialisation de la modale de contact...");

  // V√©rifie si le bouton est d√©j√† pr√©sent et attache les √©v√©nements
  if (document.querySelector(".contact-button")) {
      logEvent("info", "Bouton de contact trouv√© imm√©diatement.");
      attachModalEvents();
  } else {
      logEvent("warning", " Bouton de contact non trouv√©. Activation de l'observation DOM...");
      observeDOMForContactButton();
  }
}

/**
*  Attache les √©v√©nements d'ouverture et de fermeture de la modale.
*/
export function attachModalEvents() {
    logEvent("info", " Attachement des √©v√©nements de la modale...");

    // R√©cup√©ration dynamique du bouton de contact
    const contactButton = document.querySelector(".contact-button");

    if (!contactButton) {
        logEvent("error", "Bouton de contact introuvable.");
        return;
    }

    //  Emp√™che l'attachement multiple
    if (!contactButton.dataset.eventAttached) {
        contactButton.dataset.eventAttached = "true";
        contactButton.addEventListener("click", () => {
            logEvent("info", " Clic sur le bouton Contact.");
            handleModalOpen();
        });
        logEvent("success", " √âv√©nement attach√© au bouton Contact.");
    }

    //  R√©cup√©ration des √©l√©ments de la modale
    const { modalOverlay, contactForm, closeButton, form, confirmationModal, spamModal } = domSelectors.modal;

    if (!modalOverlay || !contactForm || !closeButton || !form) {
        logEvent("error", "Certains √©l√©ments de la modale sont introuvables.");
        return;
    }

    // Attachement des √©v√©nements de fermeture de la modale
    attachEvent(closeButton, "click", handleModalClose);
    attachEvent(modalOverlay, "click", handleModalClose);
    
    document.addEventListener("keydown", (event) => {
        if (event.key === "Escape") {
            logEvent("info", " Touche √âchap d√©tect√©e, fermeture de la modale.");
            handleModalClose();
        }
    });

    //Attachement des √©v√©nements au formulaire de contact
    if (form) {
        // üîπ **Bouton d'envoi du formulaire**
        if (form.submitButton && !form.submitButton.dataset.eventAttached) {
            form.submitButton.dataset.eventAttached = "true";
            attachEvent(form.submitButton, "click", (event) => {
                event.preventDefault();
                logEvent("info", "Formulaire soumis !");
                handleFormSubmit();
            });
            logEvent("success", "√âv√©nement attach√© au bouton d'envoi du formulaire.");
        }

        // üîπ **Champs du formulaire avec logs de saisie**
        const formFields = [
            { element: form.firstName, logMessage: "Saisie du pr√©nom." },
            { element: form.lastName, logMessage: "Saisie du nom." },
            { element: form.email, logMessage: "Saisie de l'email." },
            { element: form.messageField, logMessage: " Saisie du message." },
        ];

        formFields.forEach(({ element, logMessage }) => {
            if (element && !element.dataset.eventAttached) {
                element.dataset.eventAttached = "true";
                attachEvent(element, "input", () => logEvent("info", logMessage));
            }
        });
    }

    // Gestion de la confirmation apr√®s soumission du formulaire
    if (confirmationModal?.confirmButton) {
        attachEvent(confirmationModal.confirmButton, "click", handleModalClose);
    }

    // Gestion de la modale de d√©tection de spam
    if (spamModal?.closeButton) {
        attachEvent(spamModal.closeButton, "click", handleModalClose);
    }

    logEvent("success", "üéâ Tous les √©v√©nements de la modale sont attach√©s !");
}

function observeDOMForContactButton() {
  const observer = new MutationObserver((mutations, obs) => {
      const button = document.querySelector(".contact-button");
      if (button) {
          logEvent("success", "Bouton de contact d√©tect√© par MutationObserver !");
          attachModalEvents(); // Attache les √©v√©nements d√®s que le bouton est ajout√©
          obs.disconnect(); // Stoppe l'observation
      }
  });

  // Lance l'observation des changements dans le body
  observer.observe(document.body, {
      childList: true, // Surveille l'ajout/suppression d'√©l√©ments
      subtree: true, // Inclut tous les n≈ìuds enfants
  });
}

/**
* Initialise l'√©v√©nement de confirmation pour la modale.
*/
export function initModalConfirm() {
  try {
      logEvent("info", "‚û° Initialisation de l'√©v√©nement de confirmation...");

      // S√©lectionne le bouton de confirmation dans le DOM
      const confirmButton = document.querySelector(".confirm-btn");

      if (!confirmButton) {
          throw new Error("Bouton de confirmation introuvable.");
      }

      // Attache un √©v√©nement "click" pour la validation
      attachEvent(confirmButton, "click", handleModalConfirm);

      logEvent("success", "√âv√©nement de confirmation attach√©.");
  } catch (error) {
      logEvent("error", `Erreur dans initModalConfirm : ${error.message}`);
  }
}




/*=======================================================*/
//    2.formulaire
/*=======================================================*/
/**

/**
 * Initialise les √©v√©nements du formulaire de contact.
 * 
 * - Surveille l'entr√©e utilisateur dans le champ "message".
 * - Met √† jour dynamiquement le compteur de caract√®res en temps r√©el.
 * - Emp√™che le d√©passement de la limite de caract√®res d√©finie.
 * - G√®re les erreurs si l'√©l√©ment cible est introuvable.
 * 
 * @function setupContactFormEvents
 */
export function setupContactFormEvents() {
  try {
    // R√©cup√©ration de l'√©l√©ment du champ message
    const {messageField} = domSelectors.modal.form;

    // V√©rifie si l'√©l√©ment existe avant d'attacher l'√©v√©nement
    if (!messageField) {
      throw new Error("Champ 'message' introuvable. V√©rifiez l'ID dans le DOM.");
    }

    // Attache un √©v√©nement "input" au champ "message" pour suivre la saisie en temps r√©el
    attachEvent(messageField, "input", updateCharCount);

    // Journalisation du succ√®s de l'attachement de l'√©v√©nement
    logEvent("success", "√âv√©nement 'input' attach√© au champ message.");
  } catch (error) {
    // Capture et journalise toute erreur survenant lors de l'attachement de l'√©v√©nement
    logEvent("error", `Erreur dans setupContactFormEvents : ${error.message}`);
  }
}

/*=======================================================*/
//    3. Lightbox
/*=======================================================*/
/**
 * Initialise les √©v√©nements pour la lightbox (affichage des m√©dias en plein √©cran).
 * 
 * - V√©rifie que la liste des m√©dias et le nom du dossier sont valides avant d'attacher les √©v√©nements.
 * - Attache un √©v√©nement "click" √† chaque √©l√©ment de la galerie pour ouvrir la lightbox.
 * - Ajoute les √©v√©nements de navigation (suivant/pr√©c√©dent) et de fermeture de la lightbox.
 * - G√®re les erreurs en cas de donn√©es invalides ou d'√©l√©ments manquants.
 * 
 * @param {Array} mediaArray - Liste des m√©dias disponibles.
 * @param {string} folderName - Nom du dossier contenant les m√©dias.
 * 
 * @function initLightboxEvents
 */
export function initLightboxEvents(mediaArray, folderName) {
  try {
    // Journalisation du d√©but de l'initialisation des √©v√©nements
    logEvent("info", "Initialisation des √©v√©nements pour la lightbox...");

    // V√©rification des param√®tres pour √©viter des erreurs
    if (!Array.isArray(mediaArray) || mediaArray.length === 0) {
      throw new Error("Liste des m√©dias invalide ou vide.");
    }
    if (typeof folderName !== "string" || folderName.trim() === "") {
      throw new Error("Nom du dossier invalide.");
    }

    // S√©lection des √©l√©ments de la galerie qui d√©clenchent la lightbox
    const galleryItems = document.querySelectorAll(".media");

    // V√©rification que des √©l√©ments existent bien dans la galerie
    if (!galleryItems.length) {
      throw new Error("Aucun √©l√©ment '.gallery-item' trouv√© dans la galerie.");
    }

    // Attache un √©v√©nement "click" √† chaque √©l√©ment de la galerie pour ouvrir la lightbox
    galleryItems.forEach((item) => {
      attachEvent(item, "click", (event) => handleLightboxOpen(event, mediaArray, folderName));
    });

    // Attache un √©v√©nement "click" au bouton de fermeture de la lightbox
    if (!domSelectors.lightbox.lightboxCloseButton) {
      throw new Error("Bouton de fermeture de la lightbox introuvable.");
    }
    attachEvent(domSelectors.lightbox.lightboxCloseButton, "click", handleLightboxClose);

    // Attache un √©v√©nement "click" aux boutons de navigation (pr√©c√©dent/suivant)
    if (!domSelectors.lightbox.lightboxPrevButton) {
      throw new Error("Bouton pr√©c√©dent de la lightbox introuvable.");
    }
    attachEvent(domSelectors.lightbox.lightboxPrevButton, "click", handleLightboxPrev);

    if (!domSelectors.lightbox.lightboxNextButton) {
      throw new Error("Bouton suivant de la lightbox introuvable.");
    }
    attachEvent(domSelectors.lightbox.lightboxNextButton, "click", handleLightboxNext);

    // Journalisation du succ√®s de l'initialisation des √©v√©nements
    logEvent("success", "√âv√©nements de la lightbox initialis√©s avec succ√®s.");
  } catch (error) {
    // Capture et journalisation des erreurs pour √©viter les comportements inattendus
    logEvent("error", `Erreur dans initLightboxEvents : ${error.message}`);
  }
}


/*=======================================================*/
//    4.tri
/*=======================================================*/
/**
 * Initialise les √©v√©nements pour le tri des m√©dias.
 * 
 * - Ajoute un √©v√©nement "change" √† la liste d√©roulante du tri des m√©dias.
 * - Permet de r√©organiser dynamiquement les m√©dias en fonction de l'option s√©lectionn√©e.
 * - V√©rifie que l'√©l√©ment de tri est bien pr√©sent avant d'attacher l'√©v√©nement.
 * - G√®re les erreurs si l'√©l√©ment est introuvable.
 * 
 * @function initSortingEvents
 */
function initSortingEvents() {
  try {
    // Journalisation du d√©but de l'initialisation des √©v√©nements
    logEvent("info", "Initialisation des √©v√©nements pour le tri des m√©dias...");

    // R√©cup√©ration de l'√©l√©ment de tri dans le DOM
    const {sortOptions} = domSelectors.sorting;

    // V√©rification que l'√©l√©ment existe avant d'attacher un √©v√©nement
    if (!sortOptions) {
      throw new Error("√âl√©ment de tri des m√©dias introuvable.");
    }

    // Attache un √©v√©nement "change" pour d√©clencher le tri lorsqu'une option est s√©lectionn√©e
    attachEvent(sortOptions, "change", handleSortChange);

    // Journalisation du succ√®s de l'attachement de l'√©v√©nement
    logEvent("success", "√âv√©nements pour le tri des m√©dias initialis√©s avec succ√®s.");
  } catch (error) {
    // Capture et journalisation des erreurs si l'√©l√©ment est absent ou en cas de probl√®me d'attachement
    logEvent("error", `Erreur dans initSortingEvents : ${error.message}`);
  }
}

/**
 * Initialise les √©couteurs d'√©v√©nements pour les likes et la modale de like/dislike.
 */


export async function setupEventListeners() {
  try {
    logEvent("info", "V√©rification des ic√¥nes de like...");

    // Attendre un petit d√©lai pour s'assurer que les m√©dias sont bien charg√©s
    await new Promise((resolve) => setTimeout(resolve, 300));

    let likeIcons = document.querySelectorAll(".media-item .like-icon");
    let totalLikesElement = document.querySelector("#total-likes");

    if (!likeIcons.length) {
      logEvent("warn", "Les ic√¥nes de like ne sont pas encore charg√©es. Activation du MutationObserver...");
      waitForLikesToBeLoaded();
      return;
    }

    if (!totalLikesElement) {
      logEvent("error", "L'√©l√©ment affichant le total des likes (#total-likes) est introuvable.");
      return;
    }

    logEvent("success", `${likeIcons.length} ic√¥nes de like trouv√©es ! Attachement des √©v√©nements...`);

    // Attacher un gestionnaire d'√©v√©nements √† chaque ic√¥ne de like
    likeIcons.forEach(icon => {
      icon.addEventListener("click", (event) => handleLikeClick(event, totalLikesElement));
    });

    logEvent("success", "Les √©v√©nements de like ont √©t√© initialis√©s avec succ√®s.");
  } catch (error) {
    logEvent("error", `Erreur critique dans setupEventListeners: ${error.message}`, { error });
  }
}

/**
 * Attend dynamiquement que les m√©dias et ic√¥nes de like soient charg√©s avant d'attacher les √©v√©nements.
 */
function waitForLikesToBeLoaded() {
  let attempts = 0;
  const maxAttempts = 10; // Arr√™ter apr√®s 10 tentatives pour √©viter une boucle infinie

  const observer = new MutationObserver((mutations, obs) => {
    const likeIcons = document.querySelectorAll(".media-item .like-icon");

    if (likeIcons.length) {
      logEvent("info", `Les ic√¥nes de like sont maintenant disponibles (${likeIcons.length} trouv√©es). Initialisation...`);

      setTimeout(() => {
        setupEventListeners(); // Relancer l'initialisation des √©v√©nements apr√®s un petit d√©lai
      }, 200); // On laisse le temps au DOM de finaliser son chargement

      obs.disconnect(); // Arr√™te l'observation une fois les √©l√©ments trouv√©s
    } else {
      attempts++;
      if (attempts >= maxAttempts) {
        logEvent("error", " Les ic√¥nes de like ne sont pas apparues apr√®s plusieurs tentatives.");
        obs.disconnect();
      }
    }
  });

  // Surveille les modifications dans #gallery
  const gallery = document.querySelector("#gallery");
  if (gallery) {
    observer.observe(gallery, { childList: true, subtree: true });
  } else {
    logEvent("error", " Le conteneur #gallery est introuvable. Impossible d'observer les ajouts.");
  }
}


/**
 * Enregistre les interactions clavier pour la navigation et l'accessibilit√©.
 */
function initKeyboardEvents() {
  document.addEventListener("keydown", handleKeyboardEvent);
}

/*=======================================================*/
// INITIALISATION GLOBALE DES √âV√âNEMENTS
/*=======================================================*/

/**
 * Initialise tous les √©v√©nements n√©cessaires √† l'application.
 * V√©rifie et attache tous les √©v√©nements critiques.
 */
export function initEventListeners(mediaArray, folderName) {
  logEvent("info", "D√©but de l'initialisation globale des √©v√©nements...");

  try { 
    setupEventListeners();
    initModalConfirm();
    setupContactFormEvents();
    initLightboxEvents(mediaArray, folderName);
    initSortingEvents();
    initKeyboardEvents();
  
    logEvent("success", "Tous les √©v√©nements ont √©t√© initialis√©s avec succ√®s.");
  } catch (error) {
    logEvent("error", "Erreur critique lors de l'initialisation des √©v√©nements.", { error });
  }

  logEvent("info", "Fin de l'initialisation globale des √©v√©nements.");
}
