// ========================================================
// Nom du fichier : lightbox.js
// Description    : Gestion de la lightbox pour afficher les m√©dias (images ou vid√©os) en plein √©cran.
// Auteur         : Trackozor
// Date           : 15/01/2025
// Version        : 1.4.1 (Optimisation de la gestion des animations et suppression des doublons)
// ========================================================

/*==============================================*/
/*              Imports et Config              */
/*==============================================*/
import { logEvent } from "../../utils/utils.js";
import domSelectors from "../../config/domSelectors.js";
import {handleLightboxNavigation} from "../../events/keyboardHandler.js";
// Indice du m√©dia actuellement affich√© dans la lightbox
let currentIndex = 0;

// Liste des m√©dias disponibles pour la lightbox
let mediaList = [];

// Nom du dossier contenant les fichiers m√©dias (images, vid√©os, etc.)
let globalFolderName = "";
let isVideoLightboxOpen = false; // Indicateur d'ouverture pour les vid√©os
let isTransitioning = false;
let lastDirection = "right";  
import {sorted} from "../sort/sortlogic.js";
let exitClass = "";

/*==============================================*/
/*              Initialisation              */
/*==============================================*/
/**
 * Initialise la lightbox avec une liste de m√©dias.
 * 
 * ### **Fonctionnement :**
 * - V√©rifie que `mediaArray` est un **tableau valide** et **non vide**.
 * - V√©rifie que `folderName` est **une cha√Æne de caract√®res valide**.
 * - Stocke la liste des m√©dias et le dossier associ√© dans des variables globales.
 * - Initialise `currentIndex` √† `0` pour afficher le premier m√©dia.
 * - Journalise chaque √©tape avec `logEvent()`.
 * 
 * ### **Gestion des erreurs :**
 * - V√©rifie si `mediaArray` est **un tableau valide** avant de continuer.
 * - V√©rifie que `folderName` est **une cha√Æne valide**, sinon une erreur est lev√©e.
 * - Capture et journalise toute erreur rencontr√©e via `logEvent("error", ...)`.
 * - En cas d'erreur critique, **l√®ve une exception** pour emp√™cher une mauvaise configuration.
 * 
 * @function initLightbox
 * @param {Array} mediaArray - Tableau contenant les m√©dias √† afficher dans la lightbox.
 * @param {string} folderName - Nom du dossier contenant les fichiers m√©dias.
 * @throws {Error} L√®ve une erreur si `mediaArray` est invalide ou si `folderName` est incorrect.
 */

export function initLightbox(mediaArray, folderName) {
    logEvent("init", "D√©but de l'initialisation de la lightbox.", { mediaArray });

    if (!Array.isArray(mediaArray) || mediaArray.length === 0) {
        logEvent("warn", "Le tableau de m√©dias est vide ou invalide.");
        mediaList = [];
        globalFolderName = folderName || "";
        return;
    }

    if (typeof folderName !== "string" || folderName.trim() === "") {
        logEvent("error", "Nom du dossier (folderName) invalide ou manquant.", { folderName });
        throw new Error("Le nom du dossier doit √™tre une cha√Æne de caract√®res non vide.");
    }

    try {
        mediaList = [...mediaArray];
        globalFolderName = folderName;
        currentIndex = 0;

        lastDirection = "right";  
        isTransitioning = false;  

        logEvent("success", "Lightbox initialis√©e avec succ√®s.", { mediaList });
    } catch (error) {
        logEvent("error", "Erreur lors de l'initialisation de la lightbox.", { error });
        throw new Error("Erreur d'initialisation de la lightbox : " + error.message);
    }
}


/*==============================================*/
/*              Ouverture lightbox            */
/*==============================================*/
/**
 * Ouvre la lightbox pour afficher un m√©dia √† l'index sp√©cifi√©.
 * 
 * ### **Fonctionnement :**
 * - V√©rifie que `lightboxContainer` existe dans le DOM avant toute modification.
 * - Met √† jour `mediaList` et `globalFolderName` si une nouvelle liste de m√©dias est fournie.
 * - V√©rifie que l'`index` demand√© est dans les limites de la liste de m√©dias.
 * - Met √† jour `currentIndex` pour suivre le m√©dia actuellement affich√©.
 * - Met √† jour le contenu de la lightbox via `updateLightboxContent()`.
 * - Rend la lightbox visible (`.hidden` supprim√© et `aria-hidden` mis √† `false`).
 * - Journalise chaque √©tape avec `logEvent()`.
 * 
 * ### **Gestion des erreurs :**
 * - V√©rifie que `lightboxContainer` est **pr√©sent dans le DOM** avant d‚Äôy acc√©der.
 * - V√©rifie que `mediaArray` est **un tableau valide** et **diff√©rent de `mediaList` existant** avant de le mettre √† jour.
 * - V√©rifie que `index` est **un nombre valide et dans les limites** de `mediaList`, sinon une erreur est lev√©e.
 * - Capture et journalise toute erreur avec `logEvent("error", ...)`.
 * 
 * @function openLightbox
 * @param {number} index - Index du m√©dia √† afficher dans la lightbox.
 * @param {Array} mediaArray - Tableau contenant les m√©dias (optionnel si d√©j√† d√©fini).
 * @param {string} folderName - Nom du dossier contenant les fichiers m√©dias.
 * @throws {Error} L√®ve une erreur si `lightboxContainer` est introuvable ou si `index` est invalide.
 */

export function openLightbox(index, mediaArray, folderName) {
    logEvent("action", ` Tentative d'ouverture de la lightbox pour l'index ${index}.`, { index });

    try {
        const { lightboxContainer } = domSelectors.lightbox;

        if (!lightboxContainer) {
            throw new Error(" Conteneur principal de la lightbox introuvable.");
        }

        //  V√©rifier si mediaArray contient des √©l√©ments valides avant de l'affecter
        if (Array.isArray(mediaArray) && mediaArray.length > 0) {
            mediaList = [...mediaArray];
            globalFolderName = folderName;
        }

       

        //  Tout est correct, on met √† jour currentIndex et affiche le m√©dia
        currentIndex = index;
        updateLightboxContent(mediaList[currentIndex], globalFolderName, "right");

        lightboxContainer.classList.remove("hidden");
        lightboxContainer.setAttribute("aria-hidden", "false");

        // Ajoute les √©couteurs pour navigation et fermeture
        document.querySelector(".lightbox-overlay")?.addEventListener("click", closeLightbox);
        
        if (!document.__lightboxKeyboardListener) {
            document.addEventListener("keydown", handleLightboxNavigation);
            document.__lightboxKeyboardListener = true;
        }

        logEvent("success", `Lightbox ouverte avec succ√®s pour l'index ${currentIndex}.`);

    } catch (error) {
        logEvent("error", ` Erreur lors de l'ouverture de la lightbox : ${error.message}`, { error });
    }
}


/*==============================================*/
/*              Fermeture lightbox            */
/*==============================================*/
/**
 * Ferme la lightbox et r√©initialise son √©tat.
 * 
 * ### **Fonctionnement :**
 * - V√©rifie que le `lightboxContainer` existe avant toute interaction.
 * - Supprime le m√©dia actuellement affich√© pour lib√©rer la m√©moire.
 * - R√©initialise le texte du titre (`lightboxCaption`).
 * - R√©initialise les variables globales (`currentIndex`, `mediaList`, `globalFolderName`).
 * - Ajoute la classe `hidden` pour masquer la lightbox et met `aria-hidden` √† `true` pour l‚Äôaccessibilit√©.
 * - Journalise chaque √©tape et capture les erreurs √©ventuelles.
 * 
 * ### **Gestion des erreurs :**
 * - V√©rifie que `lightboxContainer` existe avant d‚Äôessayer de le masquer.
 * - V√©rifie que `lightboxMediaContainer` et `lightboxCaption` existent avant de les modifier.
 * - Capture et journalise toute erreur avec `logEvent("error", ...)`.
 * 
 * @function closeLightbox
 * @throws {Error} L√®ve une erreur si la lightbox ne peut pas √™tre ferm√©e correctement.
 */


// Variable globale pour suivre si la lightbox est ouverte sur une vid√©o

export function closeLightbox() {
    logEvent("action", "Fermeture de la lightbox et r√©initialisation du contenu.");

    try {
        const { lightboxContainer, lightboxMediaContainer, lightboxCaption } = domSelectors.lightbox;

        if (!lightboxContainer) {
            throw new Error("Conteneur principal de la lightbox introuvable.");
        }

        // Suppression UNIQUEMENT des m√©dias (image/vid√©o) sans toucher aux boutons
        const mediaToRemove = lightboxMediaContainer.querySelector(".active-media");
        if (mediaToRemove) {
            mediaToRemove.remove();
            logEvent("info", "üóë M√©dia actuel supprim√© de la lightbox.");
        }

        // R√©initialisation du titre (caption)
        if (lightboxCaption) {
            lightboxCaption.textContent = "";
            logEvent("info", " Caption de la lightbox r√©initialis√©e.");
        }

        // R√©initialisation de l'√©tat vid√©o
        if (isVideoLightboxOpen) {
            isVideoLightboxOpen = false;
            logEvent("info", "R√©initialisation de isVideoLightboxOpen apr√®s fermeture.");
        }

        //  R√©active les contr√¥les des vid√©os dans la galerie apr√®s la fermeture
        setTimeout(() => {
            initializeVideoHandlers();  //  Assure que les vid√©os redeviennent interactives apr√®s la fermeture
            logEvent("info", " R√©activation des vid√©os apr√®s fermeture de la lightbox.");
        }, 300); // Petit d√©lai pour √©viter les conflits

        

        // R√©initialisation des variables globales
        currentIndex = 0;
        mediaList = [];
        globalFolderName = "";

        // Masquer la lightbox sans supprimer ses √©l√©ments de structure
        lightboxContainer.classList.add("hidden");
        lightboxContainer.setAttribute("aria-hidden", "true");

        logEvent("success", "Lightbox ferm√©e, vid√©os r√©activ√©es et touches clavier fonctionnelles.");

    } catch (error) {
        logEvent("error", ` Erreur lors de la fermeture de la lightbox : ${error.message}`, { error });
    }
}


/*==============================================*/
/*             Gestion des animations          */
/*==============================================*/
function handleAnimationEnd() {
        try {
            // Retirer l'√©couteur d'√©v√©nement pour √©viter les r√©p√©titions
            mediaElement.removeEventListener("animationend", handleAnimationEnd);

            // Ex√©cute la fonction de rappel apr√®s l'animation
            callback();

            logEvent("success", `Animation de sortie termin√©e avec effet : ${exitClass}`);
        } catch (callbackError) {
            logEvent("error", `Erreur dans la fonction de rappel apr√®s l'animation : ${callbackError.message}`, { callbackError });
        }
    }

/**-----------------------------------------------------------------------------------------------
 * Applique une animation de sortie vers la gauche au m√©dia actuellement affich√© dans la lightbox.
 * ------------------------------------------------------------------------------------------------
 * 
 * ### **Fonctionnement :**
 * - Ajoute la classe CSS `"lightbox-exit-left"` pour d√©clencher l'animation de sortie.
 * - Attend la fin de l'animation (`animationend`) avant d'ex√©cuter la fonction `callback()`.
 * - Supprime l'√©couteur d'√©v√©nement apr√®s la premi√®re ex√©cution gr√¢ce √† `{ once: true }`.
 * 
 * ### **Gestion des erreurs :**
 * - V√©rifie si `mediaElement` est bien un √©l√©ment HTML avant d'ajouter la classe.
 * - V√©rifie si `callback` est une fonction avant de l'ex√©cuter.
 * - Capture et journalise toute erreur avec `logEvent("error", ...)`.
 * 
 * @function animateMediaExitLeft
 * @param {HTMLElement} mediaElement - L'√©l√©ment HTML du m√©dia en cours d'affichage dans la lightbox.
 * @param {Function} callback - Fonction de rappel ex√©cut√©e une fois l'animation termin√©e.
 * @throws {Error} L√®ve une erreur si `mediaElement` n'est pas valide ou si `callback` n'est pas une fonction.
 */
function animateMediaExitLeft(mediaElement, callback) {
    try {
        // V√©rifie que `mediaElement` est un √©l√©ment HTML valide
        if (!(mediaElement instanceof HTMLElement)) {
            throw new Error("L'√©l√©ment m√©dia est invalide ou non d√©fini.");
        }

        // V√©rifie que `callback` est bien une fonction avant de l'appeler
        if (typeof callback !== "function") {
            throw new Error("Le param√®tre `callback` doit √™tre une fonction valide.");
        }

        // D√©terminer la direction de l'animation en fonction du tri
        const exitClass = sorted ? "lightbox-exit-right" : "lightbox-exit-left";

        // Supprime toutes les classes d'animation pour √©viter les conflits
        mediaElement.classList.remove("lightbox-exit-left", "lightbox-exit-right");

        // Ajoute la classe CSS pour d√©clencher l'animation de sortie
        mediaElement.classList.add(exitClass);

        // Attacher un √©couteur d'√©v√©nement avec une fonction fl√©ch√©e pour capturer `exitClass`
        mediaElement.addEventListener("animationend", () => {
            try {
                // Supprime l'√©couteur imm√©diatement apr√®s ex√©cution
                mediaElement.removeEventListener("animationend", handleAnimationEnd);

                // Ex√©cute la fonction de rappel apr√®s l'animation
                callback();

                logEvent("success", `Animation de sortie termin√©e avec effet : ${exitClass}`);
            } catch (callbackError) {
                logEvent("error", `Erreur dans la fonction de rappel apr√®s l'animation : ${callbackError.message}`, { callbackError });
            }
        }, { once: true });

        logEvent("info", `Animation de sortie lanc√©e avec effet : ${exitClass}`);
    } catch (error) {
        logEvent("error", `Erreur lors de l'animation de sortie : ${error.message}`, { error });
    }
}

/**-------------------------------------------------------------------------------------------------
 * Applique une animation de sortie vers la droite au m√©dia actuellement affich√© dans la lightbox.
 * -------------------------------------------------------------------------------------------------
 * 
 * ### **Fonctionnement :**
 * - Ajoute la classe CSS `"lightbox-exit-right"` pour d√©clencher l'animation de sortie.
 * - Attend la fin de l'animation (`animationend`) avant d'ex√©cuter la fonction `callback()`.
 * - Supprime l'√©couteur d'√©v√©nement apr√®s la premi√®re ex√©cution gr√¢ce √† `{ once: true }`.
 * 
 * ### **Gestion des erreurs :**
 * - V√©rifie si `mediaElement` est bien un √©l√©ment HTML avant d'ajouter la classe.
 * - V√©rifie si `callback` est une fonction avant de l'ex√©cuter.
 * - Capture et journalise toute erreur avec `logEvent("error", ...)`.
 * 
 * @function animateMediaExitRight
 * @param {HTMLElement} mediaElement - L'√©l√©ment HTML du m√©dia en cours d'affichage dans la lightbox.
 * @param {Function} callback - Fonction de rappel ex√©cut√©e une fois l'animation termin√©e.
 * @throws {Error} L√®ve une erreur si `mediaElement` n'est pas valide ou si `callback` n'est pas une fonction.
 */

function animateMediaExitRight(mediaElement, callback) {
    try {
        // V√©rifie que `mediaElement` est un √©l√©ment HTML valide
        if (!(mediaElement instanceof HTMLElement)) {
            throw new Error("L'√©l√©ment m√©dia est invalide ou non d√©fini.");
        }

        // V√©rifie que `callback` est bien une fonction avant de l'appeler
        if (typeof callback !== "function") {
            throw new Error("Le param√®tre `callback` doit √™tre une fonction valide.");
        }

        // D√©terminer la direction de l'animation en fonction du tri
        const exitClass = sorted ? "lightbox-exit-left" : "lightbox-exit-right";

        // Supprime toutes les classes d'animation pour √©viter les conflits
        mediaElement.classList.remove("lightbox-exit-left", "lightbox-exit-right");

        // Ajoute la classe CSS pour d√©clencher l'animation de sortie
        mediaElement.classList.add(exitClass);

        // Attacher un √©couteur d'√©v√©nement pour d√©tecter la fin de l'animation
        mediaElement.addEventListener("animationend", handleAnimationEnd);

        logEvent("info", `Animation de sortie lanc√©e avec effet : ${exitClass}`);
    } catch (error) {
        logEvent("error", `Erreur lors de l'animation de sortie : ${error.message}`, { error });
}



    // Fonction s√©par√©e pour g√©rer la fin de l'animation
function handleAnimationEnd() {
        try {
            // Retirer l'√©couteur d'√©v√©nement pour √©viter les r√©p√©titions
            mediaElement.removeEventListener("animationend", handleAnimationEnd);

            // Ex√©cute la fonction de rappel apr√®s l'animation
            callback();

            logEvent("success", `Animation de sortie termin√©e avec effet : ${exitClass}`);
        } catch (callbackError) {
            logEvent("error", `Erreur dans la fonction de rappel apr√®s l'animation : ${callbackError.message}`, { callbackError });
        }
    }
}



/*==============================================*/
/*             Insertion           */
/*==============================================*/

/**
 * Ins√®re un nouveau m√©dia dans la lightbox avec une animation d'entr√©e.
 * 
 * ### **Fonctionnement :**
 * - V√©rifie si les param√®tres `media` et `folderPath` sont valides.
 * - Cr√©e dynamiquement un √©l√©ment `<img>` ou `<video>` en fonction du type de m√©dia.
 * - Configure les attributs n√©cessaires pour chaque type de m√©dia (source, accessibilit√©, contr√¥les...).
 * - Ajoute une classe CSS pour animer l‚Äôentr√©e du m√©dia.
 * - Met √† jour la l√©gende (`lightboxCaption`) avec le titre du m√©dia.
 * - Journalise l'op√©ration via `logEvent()`.
 * 
 * ### **Gestion des erreurs :**
 * - V√©rifie que `media` est bien un objet avec une image ou une vid√©o.
 * - V√©rifie que `folderPath` est une cha√Æne valide.
 * - V√©rifie que `lightboxMediaContainer` et `lightboxCaption` existent bien dans le DOM.
 * - Capture et journalise toute erreur inattendue.
 * 
 * @function insertNewMedia
 * @param {Object} media - Objet repr√©sentant le m√©dia √† ins√©rer.
 * @param {string} folderPath - Chemin d'acc√®s au dossier contenant les m√©dias.
 * @param {string} direction - Direction de l'animation d'entr√©e (`"left"` ou `"right"`).
 * @throws {Error} G√©n√®re une erreur si un param√®tre est invalide ou si l'insertion √©choue.
 */

function insertNewMedia(media, folderPath, direction) {
    try {
        // V√©rifie que `media` est un objet valide avec une image ou une vid√©o
        if (!media || (typeof media !== "object") || (!media.image && !media.video)) {
            throw new Error("Le param√®tre `media` est invalide ou ne contient ni image ni vid√©o.");
        }

        // V√©rifie que `folderPath` est une cha√Æne valide
        if (typeof folderPath !== "string" || folderPath.trim() === "") {
            throw new Error("Le chemin du dossier `folderPath` est invalide.");
        }

        // V√©rifie la validit√© des s√©lecteurs DOM avant d'interagir avec eux
        const { lightboxMediaContainer, lightboxCaption } = domSelectors.lightbox;
        if (!lightboxMediaContainer || !lightboxCaption) {
            throw new Error("Les √©l√©ments DOM de la lightbox sont introuvables.");
        }

        // Cr√©e un nouvel √©l√©ment m√©dia en fonction du type (image ou vid√©o)
        let newMedia = document.createElement(media.image ? "img" : "video");
        newMedia.classList.add("lightbox-media", "active-media");

        // Configure les attributs sp√©cifiques selon le type de m√©dia
        if (media.image) {
            newMedia.src = `${folderPath}${media.image}`;
            newMedia.alt = media.title || "Image sans titre"; // Accessibilit√©
            newMedia.loading = "lazy"; // Optimisation du chargement
        } else if (media.video) {
            newMedia.src = `${folderPath}${media.video}`;
            newMedia.controls = true;
            newMedia.autoplay = true;
            newMedia.muted = false;
        }

        // Ajoute le nouvel √©l√©ment m√©dia au conteneur de la lightbox
        lightboxMediaContainer.appendChild(newMedia);

        // Met √† jour la l√©gende avec le titre du m√©dia
        lightboxCaption.textContent = media.title || "Sans titre";

        // Journalisation du succ√®s
        logEvent("success", "M√©dia ins√©r√© avec succ√®s dans la lightbox.", { media, direction });

    } catch (error) {
        // Capture et journalise toute erreur rencontr√©e
        logEvent("error", `Erreur lors de l'insertion du m√©dia dans la lightbox : ${error.message}`, { error });
    }
}


/*==============================================*/
/*             Navigation          */
/*==============================================*/

/**----------------------------------------------------------------
 * G√®re la navigation vers le m√©dia suivant dans la lightbox.
 * ----------------------------------------------------------------
 * 
 * ### **Fonctionnement :**
 * - V√©rifie que `mediaList` est bien d√©fini et contient des m√©dias.
 * - Emp√™che les changements multiples rapides gr√¢ce √† la variable `isTransitioning`.
 * - Met √† jour l'index actuel (`currentIndex`) pour passer au m√©dia suivant en boucle.
 * - Met √† jour l'affichage du m√©dia en appelant `updateLightboxContent()`.
 * - Utilise un `setTimeout()` pour limiter la rapidit√© des changements et garantir une animation fluide.
 * 
 * ### **Gestion des erreurs :**
 * - V√©rifie que `mediaList` est bien un tableau et qu'il contient des m√©dias.
 * - V√©rifie que `globalFolderName` est bien une cha√Æne valide avant de l'utiliser.
 * - Emp√™che tout comportement erratique en bloquant les transitions trop rapides avec `isTransitioning`.
 * - Capture et journalise toute erreur inattendue.
 * 
 * @function showNextMedia
 * @throws {Error} G√©n√®re une erreur si `mediaList` est invalide ou vide.
 */

export function showNextMedia() {
    try {
        if (!Array.isArray(mediaList) || mediaList.length === 0) {
            throw new Error("Aucun m√©dia disponible pour la navigation.");
        }

        if (typeof globalFolderName !== "string") {
            throw new Error("Nom du dossier invalide ou non d√©fini.");
        }

        if (isTransitioning) {
            logEvent("warn", "‚è≥ Tentative de navigation alors qu'une transition est en cours.");
            return;
        }

        //  D√©sactive les entr√©es clavier pendant la transition
        isTransitioning = true;
        document.removeEventListener("keydown", handleLightboxNavigation);

          // Si un tri a √©t√© fait, inverser la direction de navigation
          if (sorted) {
            currentIndex = (currentIndex - 1 + mediaList.length) % mediaList.length;
        } else {
            currentIndex = (currentIndex + 1) % mediaList.length;
        }
        
        // Animation de sortie et mise √† jour du m√©dia
        updateLightboxContent(mediaList[currentIndex], globalFolderName, "right", () => {
            // R√©activation des entr√©es clavier apr√®s la fin de la transition
            isTransitioning = false;
            document.addEventListener("keydown", handleLightboxNavigation);
            logEvent("success", "Transition termin√©e, navigation r√©activ√©e.");
        });

        logEvent("success", ` Navigation vers le m√©dia suivant. Index actuel : ${currentIndex}`);

    } catch (error) {
        logEvent("error", ` Erreur lors de la navigation vers le m√©dia suivant : ${error.message}`, { error });
    }
}



/**----------------------------------------------------------------
 * G√®re la navigation vers le m√©dia pr√©c√©dent dans la lightbox.
 * ----------------------------------------------------------------
 * 
 * ### **Fonctionnement :**
 * - V√©rifie que `mediaList` est bien d√©fini et contient des m√©dias.
 * - Emp√™che les changements multiples rapides gr√¢ce √† la variable `isTransitioning`.
 * - Met √† jour l'index actuel (`currentIndex`) pour passer au m√©dia pr√©c√©dent en boucle.
 * - Met √† jour l'affichage du m√©dia en appelant `updateLightboxContent()`.
 * - Utilise un `setTimeout()` pour limiter la rapidit√© des changements et garantir une animation fluide.
 * 
 * ### **Gestion des erreurs :**
 * - V√©rifie que `mediaList` est bien un tableau et qu'il contient des m√©dias.
 * - V√©rifie que `globalFolderName` est bien une cha√Æne valide avant de l'utiliser.
 * - Emp√™che tout comportement erratique en bloquant les transitions trop rapides avec `isTransitioning`.
 * - Capture et journalise toute erreur inattendue.
 * 
 * @function showPreviousMedia
 * @throws {Error} G√©n√®re une erreur si `mediaList` est invalide ou vide.
 */

export function showPreviousMedia() {
    try {
        if (!Array.isArray(mediaList) || mediaList.length === 0) {
            throw new Error("Aucun m√©dia disponible pour la navigation.");
        }

        if (typeof globalFolderName !== "string") {
            throw new Error("Nom du dossier invalide ou non d√©fini.");
        }

        if (isTransitioning) {
            logEvent("warn", " Tentative de navigation alors qu'une transition est en cours.");
            return;
        }

        //  D√©sactive les entr√©es clavier pendant la transition
        isTransitioning = true;
        document.removeEventListener("keydown", handleLightboxNavigation);

         if (sorted) {
            currentIndex = (currentIndex + 1) % mediaList.length;
        } else {
            currentIndex = (currentIndex - 1 + mediaList.length) % mediaList.length;
        }
        
        // Animation de sortie et mise √† jour du m√©dia
        updateLightboxContent(mediaList[currentIndex], globalFolderName, "left", () => {
            //  R√©activation des entr√©es clavier apr√®s la fin de la transition
            document.addEventListener("keydown", handleLightboxNavigation);
            logEvent("success", " Transition termin√©e, navigation r√©activ√©e."); 
            isTransitioning = false;
        });

        logEvent("success", ` Navigation vers le m√©dia pr√©c√©dent. Index actuel : ${currentIndex}`);

    } catch (error) {
        logEvent("error", ` Erreur lors de la navigation vers le m√©dia pr√©c√©dent : ${error.message}`, { error });
    }
}


/*==============================================*/
/*             Mise a jour du contenu
/*==============================================*/
/**
 * Met √† jour dynamiquement le contenu de la lightbox avec la bonne animation.
 * 
 * ### **Fonctionnement :**
 * - V√©rifie que les param√®tres `media` et `folderName` sont valides.
 * - D√©termine le chemin correct du dossier des m√©dias.
 * - V√©rifie si un m√©dia est d√©j√† affich√© dans la lightbox.
 * - Applique une animation de sortie (`animateMediaExitLeft` ou `animateMediaExitRight`).
 * - Supprime l'ancien m√©dia avant d'ins√©rer le nouveau (`insertNewMedia`).
 * - Journalise chaque √©tape du processus pour assurer une meilleure tra√ßabilit√©.
 * 
 * ### **Gestion des erreurs :**
 * - V√©rifie que `media` est d√©fini avant de le traiter.
 * - V√©rifie que `folderName` est une cha√Æne valide.
 * - V√©rifie que `direction` est bien `"right"` ou `"left"`.
 * - Capture et journalise toute erreur inattendue via `logEvent("error", ...)`.
 * 
 * @function updateLightboxContent
 * @param {Object} media - L'objet contenant les informations du m√©dia √† afficher.
 * @param {string} folderName - Le nom du dossier contenant les m√©dias.
 * @param {string} direction - La direction de l'animation (`"right"` pour avancer, `"left"` pour reculer).
 * @throws {Error} G√©n√®re une erreur si `media` est invalide ou si `folderName` est incorrect.
 */

function updateLightboxContent(media, folderName, direction, callback) {
    try {
        logEvent("debug", ` Mise √† jour de la lightbox : ${currentIndex} / ${mediaList.length}`, {
            media, 
            currentIndex, 
            folderName, 
            direction
        });


        if (direction !== "right" && direction !== "left") {
            throw new Error(`Direction "${direction}" non valide. Attendu : "right" ou "left".`);
        }

        const { lightboxMediaContainer } = domSelectors.lightbox;
        if (!lightboxMediaContainer) {
            throw new Error("Conteneur de m√©dias de la lightbox introuvable.");
        }

        const currentMedia = lightboxMediaContainer.querySelector(".active-media");
        const folderPath = `../../../assets/photographers/${folderName}/`;

        //  Animation de sortie et suppression de l'ancien m√©dia
        if (currentMedia) {
            let exitAnimation = direction === "right" ? animateMediaExitLeft : animateMediaExitRight;
            
            exitAnimation(currentMedia, () => {
                currentMedia.remove();
                insertNewMedia(media, folderPath, direction);

                //  Appel de la fonction de rappel apr√®s insertion du m√©dia
                if (callback && typeof callback === "function") {
                    callback();
                }
            });
        } else {
            insertNewMedia(media, folderPath, direction);
            if (callback && typeof callback === "function") {
                callback();
            }
        }

        logEvent("success", ` M√©dia mis √† jour avec succ√®s. Direction : ${direction}`);

    } catch (error) {
        logEvent("error", ` Erreur lors de la mise √† jour du m√©dia dans la lightbox : ${error.message}`, { error });
    }
}

/**
 * Initialise les vid√©os de la galerie pour permettre leur ouverture en lightbox.
 * 
 * @function initializeVideoHandlers
 */
/**
 * Initialise les vid√©os pour permettre leur ouverture en lightbox.
 * Emp√™che les interactions non souhait√©es et r√©tablit l'ouverture apr√®s fermeture.
 */
export function initializeVideoHandlers() {
    logEvent("init", " Initialisation des vid√©os de la galerie...");

    const videos = document.querySelectorAll(".media-item video");

    if (!videos.length) {
        logEvent("warn", "Aucune vid√©o d√©tect√©e dans la galerie.");
        return;
    }

    videos.forEach((video) => {
        video.removeAttribute("controls"); // Supprime les contr√¥les vid√©o

        // Ajoute un √©couteur pour ouvrir la lightbox sur la vid√©o
        video.addEventListener("click", (event) => {
            event.preventDefault();
            event.stopPropagation();

            // Si la lightbox est d√©j√† ouverte sur une vid√©o, on bloque
            if (isVideoLightboxOpen) {
                logEvent("warn", " Tentative de r√©ouverture alors qu'une vid√©o est d√©j√† ouverte.");
                return;
            }

            logEvent("info", " Clic sur une vid√©o, ouverture de la lightbox...", { video });

            const galleryItem = video.closest(".gallery-item");

            if (!galleryItem) {
                logEvent("error", " Impossible de r√©cup√©rer .gallery-item pour la vid√©o.");
                return;
            }

            const mediaIndex = parseInt(galleryItem.dataset.index, 10);
            if (isNaN(mediaIndex)) {
                logEvent("error", " Index de la vid√©o introuvable.");
                return;
            }

            // On indique que la lightbox est ouverte pour une vid√©o
            isVideoLightboxOpen = true;
            logEvent("success", ` Ouverture de la lightbox vid√©o √† l'index ${mediaIndex}.`);

            openLightbox(mediaIndex, window.mediaList, window.globalFolderName);
        });
    });

    logEvent("success", " Initialisation des vid√©os termin√©e avec succ√®s.");
}


