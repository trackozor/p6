/* =============================================================================
    Projet      : Fisheye
    Fichier     : constants.js
    Auteur      : trackozor
    Date        : 01/01/2025
    Version     : 2.1
    Description : Fichier centralisant les constantes globales du projet.
                  Optimisation pour une gestion flexible des environnements,
                  des logs et des styles CSS standardis√©s.
============================================================================= */

/**
 * D√©tection et Gestion des Environnements
 * =============================================================================
 */

// D√©finition des environnements possibles.
export const ENVIRONMENTS = {
  DEVELOPMENT: "development",
  STAGING: "staging",
  PRODUCTION: "production",
};

/**
 * D√©tecte l'environnement actif en fonction du domaine.
 * @returns {string} L'environnement d√©tect√© (development, staging ou production).
 */
export const detectEnvironment = () => {
  const { hostname } = window.location;

  if (hostname === "username.github.io") {
    return ENVIRONMENTS.PRODUCTION;
  }

  // V√©rification correcte pour le localhost ou autre domaine local
  if (hostname === "127.0.0.1" || hostname === "localhost") {
    return ENVIRONMENTS.STAGING;
  }

  // Par d√©faut, retourner l'environnement d√©veloppement
  return ENVIRONMENTS.DEVELOPMENT;
};

// Force le mode d√©veloppement, quelle que soit l'URL (utile pour les tests locaux).
export const FORCE_DEV_MODE = true;

// D√©termination de l'environnement actif.
export const ACTIVE_ENVIRONMENT = FORCE_DEV_MODE
  ? ENVIRONMENTS.DEVELOPMENT
  : detectEnvironment();

console.log(`Environnement actif : ${ACTIVE_ENVIRONMENT}`);

/**
 * =============================================================================
 * Configuration Globale de l'Application
 * =============================================================================
 * Toutes les configurations sont regroup√©es dans une constante export√©e.
 * Cela inclut la gestion des logs, des styles CSS, et des comportements par environnement.
 */
export const CONFIGLOG = {
  // -------------------------------------------------------------------------
  // Informations sur l'Environnement
  // -------------------------------------------------------------------------
  ENVIRONMENT: ACTIVE_ENVIRONMENT, // Environnement actif.
  ENABLE_LOGS: ACTIVE_ENVIRONMENT === ENVIRONMENTS.DEVELOPMENT, // Activer les logs uniquement en dev.

  // -------------------------------------------------------------------------
  // Niveau de verbosit√© global
  // -------------------------------------------------------------------------
  VERBOSITY: (() => {
    switch (ACTIVE_ENVIRONMENT) {
      case ENVIRONMENTS.DEVELOPMENT:
        return "high"; // Tous les logs sont activ√©s
      case ENVIRONMENTS.STAGING:
        return "medium"; // Logs essentiels pour staging
      case ENVIRONMENTS.PRODUCTION:
        return "low"; // Logs critiques uniquement
      default:
        return "low"; // Par d√©faut, verbosit√© minimale
    }
  })(),

  // -------------------------------------------------------------------------
  // Configuration des logs par environnement
  // -------------------------------------------------------------------------
  LOG_LEVELS: (() => {
    switch (ACTIVE_ENVIRONMENT) {
      case ENVIRONMENTS.DEVELOPMENT:
        return {
          default: true,
          info: true, // Tout afficher
          warn: true,
          error: true,
          success: true,
          test_start: true, // Logs pour les tests activ√©s
          test_end: true, // Logs pour les tests activ√©s
        };
      case ENVIRONMENTS.STAGING:
        return {
          default: true,
          info: true, // Afficher uniquement les informations cl√©s
          warn: true,
          error: true,
          success: true,
          test_start: true, // Pas de logs de tests
          test_end: true, // Pas de logs de tests
        };
      case ENVIRONMENTS.PRODUCTION:
        return {
          default: true,
          info: false, // D√©sactiver les logs d'informations
          warn: true,
          error: true, // Logs critiques activ√©s
          success: true,
          test_start: true, // Aucun log inutile
          test_end: true, // Aucun log inutile
        };
      default:
        return {
          default: true,
          info: false,
          warn: true,
          error: true,
          success: true,
          test_start: true,
          test_end: true,
        };
    }
  })(),

  // -------------------------------------------------------------------------
  // Classes CSS Utilis√©es
  // -------------------------------------------------------------------------
  CSS_CLASSES: {
    ERROR_INPUT: "error-input", // Classe pour les champs en erreur.
    ERROR_MODAL: "error-modal", // Classe pour les modales d'erreur.
    MODAL_ACTIVE: "active", // Classe pour les modales actives.
    BODY_NO_SCROLL: "no-scroll", // Classe pour emp√™cher le scroll en arri√®re-plan.
  },

  // -------------------------------------------------------------------------
  // Styles pour les Logs
  // -------------------------------------------------------------------------
  LOG_STYLES: {
    default: "color: black;", // Style par d√©faut.
    info: "color: blue; font-weight: bold;", // Style pour les infos.
    warn: "color: orange; font-weight: bold;", // Style pour les avertissements.
    error: "color: red; font-weight: bold;", // Style pour les erreurs.
    success: "color: green; font-weight: bold;", // Style pour les succ√®s.
    test_start: "background-color: purple; color: white; font-weight: bold;", // Style pour le d√©but des tests.
    test_end: "background-color: brown; color: white; font-weight: bold;", // Style pour la fin des tests.
  },

  // -------------------------------------------------------------------------
  // Ic√¥nes des Logs
  // -------------------------------------------------------------------------
  LOG_ICONS: {
    default: "üîµ", // Ic√¥ne par d√©faut.
    info: "‚ÑπÔ∏è", // Ic√¥ne pour les infos.
    warn: "‚ö†Ô∏è", // Ic√¥ne pour les avertissements.
    error: "‚ùå", // Ic√¥ne pour les erreurs.
    success: "‚úÖ", // Ic√¥ne pour les succ√®s.
    test_start: "üîß", // Ic√¥ne pour le d√©but des tests.
    test_end: "üèÅ", // Ic√¥ne pour la fin des tests.
  },
};
