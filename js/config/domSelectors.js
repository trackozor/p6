/**
 * ===============================================================
 * Nom du fichier : domSelectors.js
 * Description    : Centralisation des s√©lecteurs DOM pour l'application Fisheye.
 * Auteur         : Trackozor
 * Date           : 05/01/2025
 * Version        : 1.7.0 (R√©organisation des fonctions et optimisation)
 * ===============================================================
 *
 * Objectifs :
 * - Charger dynamiquement les s√©lecteurs selon la page en cours.
 * - V√©rifier la pr√©sence des s√©lecteurs essentiels au bon fonctionnement.
 * - Ajouter des logs d√©taill√©s pour chaque √©l√©ment trouv√© ou manquant.
 * ===============================================================
 */
/*==============================================*/
/*                 Import                       */
/*==============================================*/
import { logEvent } from "../utils/utils.js";

/*==============================================*/
/*          R√©cup√©ration √©l√©ments DOM           */
/*==============================================*/
const domCache = new Map(); // Stocke les s√©lections DOM pour √©viter les requ√™tes r√©p√©t√©es

/**
 * R√©cup√®re un √©l√©ment DOM avec cache et gestion des erreurs.
 * 
 * @param {string} selector - S√©lecteur CSS.
 * @param {boolean} [isOptional=false] - Si true, ne log pas d'erreur si l'√©l√©ment est introuvable.
 * @returns {Element|null} √âl√©ment trouv√© ou `null`.
 */
export function safeQuerySelector(selector, isOptional = false) {
    // V√©rifie si l'√©l√©ment est dans le cache et toujours valide
    if (domCache.has(selector)) {
        const cachedElement = domCache.get(selector);
        if (document.body.contains(cachedElement)) {
            return cachedElement; // Retourne l'√©l√©ment s'il est encore valide
        } else {
            domCache.delete(selector); // Supprime l'entr√©e invalide du cache
        }
    }

    // Recherche de l'√©l√©ment si non pr√©sent ou invalide dans le cache
    const element = document.querySelector(selector);

    if (!element && !isOptional) {
        logEvent("error", `√âl√©ment non trouv√© : ${selector}`);
    } else if (element) {
        logEvent("info", `√âl√©ment trouv√© : ${selector}`);
        domCache.set(selector, element); // Stocke l'√©l√©ment dans le cache
    }

    return element;
}

/**
 * R√©cup√®re tous les √©l√©ments DOM correspondant √† un s√©lecteur, avec cache.
 * 
 * @param {string} selector - S√©lecteur CSS.
 * @returns {NodeList} Liste des √©l√©ments trouv√©s.
 */
export function safeQuerySelectorAll(selector) {
    // V√©rifie si la NodeList est encore valide dans le cache
    if (domCache.has(selector)) {
        const cachedNodeList = domCache.get(selector);
        if (cachedNodeList.length > 0 && document.body.contains(cachedNodeList[0])) {
            return cachedNodeList;
        } else {
            domCache.delete(selector); // Supprime la NodeList invalide du cache
        }
    }

    const elements = document.querySelectorAll(selector);

    if (!elements.length) {
        logEvent("warn", `Aucun √©l√©ment trouv√© pour : ${selector}`);
    } else {
        logEvent("info", `√âl√©ments trouv√©s pour : ${selector}, total : ${elements.length}`);
        domCache.set(selector, elements); // Stocke la NodeList dans le cache
    }

    return elements;
}


/**
 * Vide le cache des s√©lections DOM pour permettre un rafra√Æchissement.
 */
export function clearDomCache() {
    domCache.clear();
    logEvent("info", "üîÑ Cache des s√©lections DOM vid√© !");
}


/*==============================================*/
/*            designation page                  */
/*==============================================*/
/**
 * D√©termine la page actuelle en fonction de l'URL.
 * 
 * @returns {string} - Nom de la page d√©tect√©e (`"index"`, `"photographer"` ou `"unknown"`).
 */
export function getCurrentPage() {
    const url = window.location.pathname.toLowerCase();

    if (url.includes("photographer")) {
        return "photographer";
    }
    if (url.includes("index") || url === "/") {
        return "index";
    }
    return "unknown";
}

/*==============================================*/
/*       definition s√©lecteurs page index       */
/*==============================================*/
/**
 * D√©finit les s√©lecteurs sp√©cifiques pour la page `index.html`.
 * 
 * @returns {Object} S√©lecteurs pour la page d'accueil.
 */
export function getIndexSelectors() {
    return {
        indexPage: {
            header: safeQuerySelector("header"),
            logoLink: safeQuerySelector(".logo-link"),
            mainContent: safeQuerySelector("#main"),
            photographersSection: safeQuerySelector(".photographer-section"),
            photographersContainer: safeQuerySelector("#photographers-container"),
            photographerTemplate: safeQuerySelector("#photographer-template", true),
            footer: safeQuerySelector("footer"),
        },
        templates: {
            photographerTemplate: safeQuerySelector("#photographer-template"),
        },
    };
}

/*==============================================*/
/*    definition s√©lecteurs page photographe    */
/*==============================================*/
/**
 * D√©finit les s√©lecteurs sp√©cifiques pour la page `photographer.html`.
 * 
 * @returns {Object} S√©lecteurs pour la page photographe.
 */
export function getPhotographerSelectors() {
    return {
        photographerPage: {
            photographerHeader: safeQuerySelector(".photographer-info"),
            photographerTitle: safeQuerySelector("#photograph-title"),
            photographerLocation: safeQuerySelector(".photographer-card-location"),
            photographerTagline: safeQuerySelector(".photographer-card-tagline"),
            photographerProfileImage: safeQuerySelector(".photographer-card-portrait"),
            galleryContainer: safeQuerySelector("#gallery"),
            overlayContainer: safeQuerySelector("#modal-overlay"),
            sortingSelect: safeQuerySelector("#sort-options"),
            
            photographerStatsTemplate: safeQuerySelector("#photographer-stats", true),
            likeIcons: safeQuerySelectorAll(".like-icon"),
            likeButtons: safeQuerySelectorAll(".like-btn"),
            dislikeButtons: safeQuerySelectorAll(".dislike-btn"),
            likeDislikeModal: safeQuerySelector("#like-dislike-modal"),
            likeDislikeContent: safeQuerySelector(".like-dislike-content"),
            totalLikes: null,
            dailyRate: null,
        },
        lightbox: {
            lightboxContainer: safeQuerySelector("#lightbox"),
            lightboxCloseButton: safeQuerySelector(".lightbox-close"),
            lightboxPrevButton: safeQuerySelector(".lightbox-prev"),
            lightboxNextButton: safeQuerySelector(".lightbox-next"),
            lightboxMediaContainer: safeQuerySelector(".lightbox-content"),
            lightboxCaption: safeQuerySelector("#lightbox-caption"),
        },
        modal: {
            modalOverlay: safeQuerySelector("#modal-overlay"),
            contactForm: safeQuerySelector("#contact-modal form"),
            closeButton: safeQuerySelector(".modal-close"),
            form: {
                formElement: safeQuerySelector("form[aria-label='Formulaire de contact']"),
                firstName: safeQuerySelector("#first-name"),
                lastName: safeQuerySelector("#last-name"),
                email: safeQuerySelector("#email"),
                messageField: safeQuerySelector("#message"),
                submitButton: safeQuerySelector(".contact-submit-button"),
                confirmButton: safeQuerySelector(".confirm-btn"),
            },
            confirmationModal: {
                container: safeQuerySelector("#confirmation-modal"),
                title: safeQuerySelector("#confirmation-title", true),
                confirmButton: safeQuerySelector(".confirm-btn"),
            },
            spamModal: {
                container: safeQuerySelector("#spam-error-modal"),
                title: safeQuerySelector("#spam-error-title"),
                body: safeQuerySelector(".modal-body"),
                footer: safeQuerySelector(".modal-footer"),
                closeButton: safeQuerySelector(".btn-close-error"),
            },
        },
        sorting: {
            sortOptions: safeQuerySelector("#sort-options"),
        },
        loader: {
            loader: safeQuerySelector("#loader"),
            loaderText: safeQuerySelector("#loader-text"),
            progressBar: safeQuerySelector("#progress-bar"),
            progressPercentage: safeQuerySelector("#progress-percentage"),
        },
    };
}
/*==============================================*/
/*    Verification pr√©sence s√©lecteurs   */
/*==============================================*/

/**
 * V√©rifie r√©cursivement la pr√©sence des s√©lecteurs dans un objet donn√©.
 * 
 * @param {Object} obj - Objet contenant les s√©lecteurs.
 * @param {string} [parentKey=""] - Cl√© parent pour g√©n√©rer le chemin complet.
 * @param {Array<string>} missingSelectors - Tableau des s√©lecteurs manquants.
 */
export function recursiveCheck(obj, parentKey = "", missingSelectors = []) {
    Object.entries(obj).forEach(([key, value]) => {
        const fullKey = parentKey ? `${parentKey}.${key}` : key;

      // Exclusion des s√©lecteurs non critiques
        if (fullKey === "photographerPage.totalLikes" || fullKey === "photographerPage.dailyRate") {
            return;
        }

    if (typeof value === "object" && value !== null) {
          // V√©rification r√©cursive pour les objets imbriqu√©s
        recursiveCheck(value, fullKey, missingSelectors);
        } else if (!value) {
          // Ajout du s√©lecteur manquant √† la liste
            missingSelectors.push(fullKey);
        }
    });

    return missingSelectors;
}

/**
* V√©rifie la pr√©sence des s√©lecteurs n√©cessaires pour une page donn√©e.
* 
* @param {Object} selectors - Objet contenant les s√©lecteurs DOM.
* @returns {Array<string>} - Liste des s√©lecteurs manquants.
*/
export function checkSelectors(selectors) {
    return recursiveCheck(selectors);
}

/*==============================================*/
/*          Chargement s√©lecteurs               */
/*==============================================*/
/**
 * Charge dynamiquement les s√©lecteurs pour la page actuelle et les v√©rifie.
 * 
 * @returns {Object} S√©lecteurs sp√©cifiques √† la page.
 */
export function loadSelectorsForCurrentPage() {
    const currentPage = getCurrentPage();
    logEvent("info", `Page d√©tect√©e : ${currentPage}`);

    let selectors = {};

    if (currentPage === "index") {
        selectors = getIndexSelectors();
    } else if (currentPage === "photographer") {
        selectors = getPhotographerSelectors();
    }

    const missingSelectors = checkSelectors(selectors);
    if (missingSelectors.length > 0) {
        logEvent("error", "S√©lecteurs manquants d√©tect√©s.", { missingSelectors });
    }

    return selectors;
}

/*==============================================*/
/*           Initialisation s√©lecteurs          */
/*==============================================*/

/**
 * Fonction permettant de rafra√Æchir dynamiquement les s√©lecteurs en cas de modification du DOM.
 * Utile si certains √©l√©ments sont ajout√©s apr√®s le chargement initial.
 */
/**
 * Met √† jour dynamiquement les s√©lecteurs DOM apr√®s une modification du DOM.
 */
export function refreshSelectors() {
    logEvent("info", "Rafra√Æchissement des s√©lecteurs DOM...");

    // Vider le cache pour forcer une nouvelle r√©cup√©ration des √©l√©ments
    clearDomCache();

    // Mise √† jour des s√©lecteurs selon la page actuelle
    Object.assign(domSelectors, loadSelectorsForCurrentPage());

    logEvent("success", "S√©lecteurs DOM mis √† jour.");
}


// Initialisation des s√©lecteurs au chargement
const domSelectors = {
    safeQuerySelector,
    getCurrentPage,
    refreshSelectors,  
    ...loadSelectorsForCurrentPage(),
};
/**
 * Surveille les changements du DOM et met √† jour les s√©lecteurs dynamiquement.
 */
function observeDomChanges() {
    const observer = new MutationObserver((mutations) => {
        let shouldRefresh = false;

        mutations.forEach((mutation) => {
            mutation.addedNodes.forEach((node) => {
                if (node.nodeType === 1) { // V√©rifie si c'est un √©l√©ment HTML
                    // V√©rifie si un √©l√©ment surveill√© a √©t√© ajout√©
                    Object.values(domSelectors).forEach((selector) => {
                        if (selector instanceof Element && node.contains(selector)) {
                            shouldRefresh = true;
                        }
                    });
                }
            });
        });

        if (shouldRefresh) {
            logEvent("info", "Modification d√©tect√©e dans le DOM, mise √† jour des s√©lecteurs...");
            refreshSelectors();
        }
    });

    observer.observe(document.body, { childList: true, subtree: true });
    logEvent("success", "Observation des changements du DOM activ√©e.");
}

/*==============================================*/
/*        Activation de l'Observation DOM       */
/*==============================================*/

// Active l'observation des changements du DOM apr√®s initialisation des s√©lecteurs
observeDomChanges();

export default domSelectors;
