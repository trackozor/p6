/* =============================================================================
    Projet      : Fisheye
    Fichier     : constants.js
    Auteur      : trackozor
    Date        : 01/01/2025
    Version     : 1.3
    Description : Fichier centralisant toutes les constantes globales du projet.
                  Ce fichier inclut une gestion dynamique des chemins pour GitHub Pages
                  ou un environnement local, des configurations pour les logs et 
                  des styles CSS pr√©d√©finis.
============================================================================= */

// === D√©tection de l'environnement (local ou GitHub Pages) ===
// Cette variable permet de diff√©rencier un environnement local (localhost)
// d'un environnement de production (h√©berg√© sur GitHub Pages).
const ENVIRONMENT = window.location.hostname === 'username.github.io' ? 'production' : 'development';

// === D√©finition du chemin de base en fonction de l'environnement ===
// Le chemin de base est ajust√© en fonction de l'environnement pour permettre
// un chargement correct des ressources (images, scripts, JSON, etc.).
const BASE_PATH = ENVIRONMENT === 'production' ? '/fisheye/' : './';

/* =============================================================================
    Configuration Globale de l'Application
============================================================================= */

export const CONFIGLOG = {
    /* -------------------------------------------------------------------------
        Informations sur l'Environnement
        - ENVIRONMENT : Permet de savoir si l'application est en production ou d√©veloppement.
        - BASE_PATH : Pr√©fixe des chemins pour les fichiers du projet.
    ------------------------------------------------------------------------- */
    ENVIRONMENT, // 'production' ou 'development'
    BASE_PATH,   // Pr√©fixe des chemins relatifs (ajout√© dynamiquement)

    /* -------------------------------------------------------------------------
        Configuration des Logs
        - Ces options permettent de personnaliser les messages dans la console.
        - Les logs peuvent √™tre d√©sactiv√©s en production pour √©viter les fuites
          d'informations sensibles.
    ------------------------------------------------------------------------- */
    ENABLE_LOGS: ENVIRONMENT === 'development', // Activer les logs uniquement en d√©veloppement

    LOG_LEVELS: {
        default: true,                  // Activer les logs par d√©faut (g√©n√©riques)
        info: ENVIRONMENT === 'development', // Logs d'information (dev uniquement)
        warn: true,                     // Logs d'avertissement (toujours activ√©s)
        error: true,                    // Logs d'erreurs critiques (toujours activ√©s)
        success: true,                  // Logs de succ√®s (toujours activ√©s)
        test_start: ENVIRONMENT === 'development', // D√©but des tests (dev uniquement)
        test_end: ENVIRONMENT === 'development',   // Fin des tests (dev uniquement)
    },

    /* -------------------------------------------------------------------------
        Classes CSS Utilis√©es
        - Ces classes CSS standardis√©es peuvent √™tre appliqu√©es aux √©l√©ments HTML
          pour styliser dynamiquement des erreurs, modales, etc.
    ------------------------------------------------------------------------- */
    CSS_CLASSES: {
        ERROR_INPUT: 'error-input',     // Pour styliser un champ de formulaire invalide
        ERROR_MODAL: 'error-modal',     // Pour afficher une erreur dans une modale
        MODAL_ACTIVE: 'active',         // Indique qu'une modale est ouverte
        BODY_NO_SCROLL: 'no-scroll',    // Emp√™che le d√©filement du body lorsque la modale est ouverte
    },

    /* -------------------------------------------------------------------------
        Styles pour les Logs
        - Ces styles permettent de personnaliser les messages affich√©s dans la console.
        - Ils aident √† identifier visuellement les diff√©rents types de logs.
    ------------------------------------------------------------------------- */
    LOG_STYLES: {
        info: "color: blue; font-weight: bold;",      // Style pour les logs d'information
        warn: "color: orange; font-weight: bold;",    // Style pour les avertissements
        error: "color: red; font-weight: bold;",      // Style pour les erreurs critiques
        success: "color: green; font-weight: bold;",  // Style pour les succ√®s
        default: "color: black;",                     // Style par d√©faut (neutre)
        test_start: "background-color: #4682B4; color: white; font-weight: bold;", // Style pour le d√©but des tests
        test_end: "background-color:#00CED1; color: black; font-weight: bold;",    // Style pour la fin des tests
    },

    /* -------------------------------------------------------------------------
        Ic√¥nes des Logs
        - Ces ic√¥nes peuvent √™tre utilis√©es pour rendre les logs plus visuels.
        - Chaque type de log est associ√© √† une ic√¥ne descriptive.
    ------------------------------------------------------------------------- */
    LOG_ICONS: {
        info: '‚ÑπÔ∏è',      // Ic√¥ne pour les messages d'information
        warn: '‚ö†Ô∏è',      // Ic√¥ne pour les avertissements
        error: '‚ùå',      // Ic√¥ne pour les erreurs critiques
        success: '‚úÖ',    // Ic√¥ne pour indiquer un succ√®s
        default: 'üîµ',    // Ic√¥ne par d√©faut (neutre)
    },

    /* -------------------------------------------------------------------------
        Chemins des Fichiers et des Ressources
        - Centralisation des chemins pour les fichiers JSON, images, vid√©os, etc.
        - Utilise BASE_PATH pour ajuster dynamiquement les chemins en fonction
          de l'environnement (local ou production).
    ------------------------------------------------------------------------- */
    PATHS: {
        // === Donn√©es JSON ===
        DATA: {
            PHOTOGRAPHERS_JSON: `${BASE_PATH}assets/data/photographers.json`, // Fichier JSON des photographes
        },

        // === Ressources Statiques (Assets) ===
        ASSETS: {
            IMAGES: `${BASE_PATH}assets/images/`, // Dossier contenant les images
            VIDEOS: `${BASE_PATH}assets/videos/`, // Dossier contenant les vid√©os
            ICONS: `${BASE_PATH}assets/icons/`,   // Dossier contenant les ic√¥nes
        },
    },
};
